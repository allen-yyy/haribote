[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_io_cli
	EXTERN	_init_all_device
	EXTERN	_LDevs
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_fifo32_put
	EXTERN	_file_readfat
	EXTERN	_code_init
	EXTERN	_load_external_device
	EXTERN	_make_button8
	EXTERN	_file_search
	EXTERN	_file_loadfile2
	EXTERN	_memman_free_4k
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_acpiPowerOff
	EXTERN	_sheet_free
	EXTERN	_taskctl
	EXTERN	_mouse_decode
	EXTERN	_do_mouse_click
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_keytable0.0
	EXTERN	_wait_KBC_sendready
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_hankaku
	EXTERN	_change_wtitle8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_task_now
	EXTERN	_readrtc
	EXTERN	_sprintf
	EXTERN	_boxfill8
	EXTERN	_putfonts8_asc
	EXTERN	_sheet_refresh
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	92
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	64
	DB	35
	DB	36
	DB	37
	DB	94
	DB	38
	DB	42
	DB	40
	DB	41
	DB	95
	DB	43
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	58
	DB	34
	DB	126
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"shutdown",0x00
LC1:
	DB	"nihongo.fnt",0x00
LC3:
	DB	0x0A,"Break(mouse) :",0x0A,0x00
LC2:
	DB	0x0A,"Break(key) :",0x0A,0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EDI,DWORD [-92+EBP]
	SUB	ESP,1116
	MOV	DWORD [-1056+EBP],-1
	MOV	DWORD [-1060+EBP],0
	MOV	DWORD [-1064+EBP],2147483647
	MOV	DWORD [-1068+EBP],0
	MOV	DWORD [-1084+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1088+EBP],EDX
	MOV	DWORD [-1092+EBP],-1
	MOV	DWORD [-1096+EBP],0
	MOV	DWORD [-1100+EBP],-1
	MOV	DWORD [-1104+EBP],-1
	MOV	DWORD [-1108+EBP],0
	MOV	DWORD [-1112+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EDI
	CALL	_fifo32_init
	MOV	DWORD [4076],EDI
	CALL	_init_pit
	PUSH	256
	PUSH	EDI
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EDI
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	175
	PUSH	161
	CALL	_io_out8
	LEA	ECX,DWORD [-124+EBP]
	PUSH	0
	LEA	EAX,DWORD [-764+EBP]
	PUSH	EAX
	PUSH	32
	PUSH	ECX
	CALL	_fifo32_init
	ADD	ESP,32
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1072+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1072+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	MOV	DWORD [3824],3932160
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	PUSH	3932160
	MOV	DWORD [-1044+EBP],EAX
	CALL	_task_init
	PUSH	3
	PUSH	1
	MOV	DWORD [-1080+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-68+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	MOV	EDX,DWORD [-1080+EBP]
	MOV	EAX,DWORD [-1044+EBP]
	MOV	DWORD [4068],EAX
	MOV	BYTE [300+EDX],0
	PUSH	EAX
	CALL	_sheet_alloc
	MOV	ESI,EAX
	MOVSX	EDX,WORD [4086]
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	ESI
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	3932160
	PUSH	DWORD [-1120+EBP]
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_init_screen8
	PUSH	DWORD [-1044+EBP]
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1076+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	99
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1048+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	PUSH	ESI
	CDQ
	IDIV	EBX
	MOV	DWORD [-1052+EBP],EAX
	CALL	_sheet_slide
	PUSH	DWORD [-1052+EBP]
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	0
	PUSH	ESI
	CALL	_sheet_updown
	PUSH	1
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_updown
	CALL	_io_cli
	CALL	_init_all_device
	PUSH	3932160
	CALL	_LDevs
	CALL	_io_sti
	CALL	_timer_alloc
	PUSH	2280
	PUSH	EDI
	PUSH	EAX
	MOV	DWORD [-1124+EBP],EAX
	CALL	_timer_init
	ADD	ESP,32
	PUSH	100
	PUSH	DWORD [-1124+EBP]
	CALL	_timer_settime
	LEA	EDX,DWORD [-124+EBP]
	PUSH	237
	PUSH	EDX
	CALL	_fifo32_put
	LEA	ECX,DWORD [-124+EBP]
	PUSH	DWORD [-1088+EBP]
	PUSH	ECX
	CALL	_fifo32_put
	PUSH	11520
	PUSH	3932160
	CALL	_memman_alloc_4k
	ADD	ESP,32
	PUSH	1049088
	MOV	DWORD [-1120+EBP],EAX
	PUSH	EAX
	CALL	_file_readfat
	CALL	_io_cli
	CALL	_code_init
	PUSH	3932160
	PUSH	DWORD [-1120+EBP]
	CALL	_load_external_device
	CALL	_io_sti
	PUSH	EDI
	PUSH	LC0
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	CALL	_make_button8
	ADD	ESP,40
	PUSH	224
	PUSH	1058304
	PUSH	LC1
	CALL	_file_search
	ADD	ESP,12
	MOV	EDX,EAX
	TEST	EAX,EAX
	JE	L2
	MOV	EAX,DWORD [28+EAX]
	MOV	DWORD [-1040+EBP],EAX
	LEA	EAX,DWORD [-1040+EBP]
	PUSH	DWORD [-1120+EBP]
	PUSH	EAX
	MOVZX	EAX,WORD [26+EDX]
	PUSH	EAX
	CALL	_file_loadfile2
	ADD	ESP,12
	MOV	ECX,EAX
L3:
	MOV	DWORD [4072],ECX
	PUSH	11520
	PUSH	DWORD [-1120+EBP]
	PUSH	3932160
	CALL	_memman_free_4k
L97:
	ADD	ESP,12
L14:
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDI
	TEST	EAX,EAX
	JLE	L17
	CMP	DWORD [-1092+EBP],0
	JS	L102
L17:
	LEA	EBX,DWORD [-92+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JE	L103
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1040+EBP],EAX
	CALL	_io_sti
	POP	EBX
	CMP	DWORD [-1116+EBP],0
	JE	L24
	MOV	EAX,DWORD [-1116+EBP]
	CMP	DWORD [28+EAX],0
	JNE	L24
	MOV	EDX,DWORD [-1044+EBP]
	MOV	DWORD [-1116+EBP],0
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,1
	JE	L24
	MOV	ECX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [16+ECX+EAX*4]
	PUSH	EAX
	MOV	DWORD [-1116+EBP],EAX
	CALL	_keywin_on
	POP	ECX
L24:
	MOV	EDX,DWORD [-1040+EBP]
	LEA	EAX,DWORD [-256+EDX]
	CMP	EAX,255
	JBE	L104
	LEA	EAX,DWORD [-512+EDX]
	CMP	EAX,255
	JBE	L105
	LEA	EAX,DWORD [-768+EDX]
	CMP	EAX,255
	JBE	L106
	LEA	EAX,DWORD [-1024+EDX]
	CMP	EAX,999
	JBE	L107
	LEA	EAX,DWORD [-2024+EDX]
	CMP	EAX,255
	JBE	L108
	CMP	EDX,2280
	JE	L109
	CMP	EDX,3000
	JNE	L14
	CALL	_acpiPowerOff
	JMP	L14
L109:
	CALL	_printtime2
	PUSH	100
	PUSH	DWORD [-1124+EBP]
	CALL	_timer_settime
L98:
	POP	EAX
	POP	EDX
	JMP	L14
L108:
	IMUL	EAX,EDX,40
	ADD	EAX,DWORD [-1044+EBP]
	PUSH	42240
	PUSH	DWORD [-79916+EAX]
	PUSH	3932160
	LEA	EBX,DWORD [-79916+EAX]
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	ADD	ESP,16
	JMP	L14
L107:
	IMUL	EDX,EDX,332
	ADD	EDX,DWORD [_taskctl]
	LEA	EAX,DWORD [-335876+EDX]
	PUSH	EAX
	CALL	_close_constask
L96:
	POP	ECX
	JMP	L14
L106:
	IMUL	EAX,EDX,40
	MOV	EDX,DWORD [-1044+EBP]
	LEA	EAX,DWORD [-29676+EAX+EDX*1]
	PUSH	EAX
	CALL	_close_console
	JMP	L96
L105:
	MOVZX	EAX,BYTE [-1040+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L14
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1052+EBP],EAX
	ADD	DWORD [-1048+EBP],EDX
	JS	L110
L60:
	CMP	DWORD [-1052+EBP],0
	JS	L111
L61:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L62
	MOV	DWORD [-1048+EBP],EAX
L62:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1052+EBP],EAX
	JLE	L63
	MOV	DWORD [-1052+EBP],EAX
L63:
	MOV	ECX,DWORD [-1048+EBP]
	MOV	EAX,DWORD [-1052+EBP]
	MOV	DWORD [-1056+EBP],ECX
	MOV	DWORD [-1060+EBP],EAX
	TEST	DWORD [-768+EBP],1
	JNE	L112
	MOV	DWORD [-1100+EBP],-1
	CMP	DWORD [-1064+EBP],2147483647
	JE	L14
L99:
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1064+EBP]
	PUSH	DWORD [-1112+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1064+EBP],2147483647
	JMP	L97
L112:
	CMP	DWORD [-1100+EBP],0
	JS	L113
	MOV	EBX,DWORD [-1048+EBP]
	MOV	ECX,DWORD [-1108+EBP]
	SUB	EBX,DWORD [-1100+EBP]
	MOV	ESI,DWORD [-1052+EBP]
	SUB	ESI,DWORD [-1104+EBP]
	MOV	EAX,DWORD [-1052+EBP]
	LEA	EBX,DWORD [2+EBX+ECX*1]
	MOV	DWORD [-1104+EBP],EAX
	MOV	DWORD [-1064+EBP],EBX
	ADD	DWORD [-1068+EBP],ESI
	AND	DWORD [-1064+EBP],-4
	JMP	L14
L113:
	PUSH	EAX
	PUSH	ECX
	CALL	_do_mouse_click
	POP	EAX
	MOV	EDX,DWORD [-1044+EBP]
	MOV	EDI,DWORD [16+EDX]
	POP	EDX
	DEC	EDI
L101:
	TEST	EDI,EDI
	JLE	L14
	MOV	ECX,DWORD [-1044+EBP]
	MOV	ESI,DWORD [-1052+EBP]
	MOV	EBX,DWORD [-1048+EBP]
	MOV	ECX,DWORD [20+ECX+EDI*4]
	MOV	DWORD [-1112+EBP],ECX
	SUB	ESI,DWORD [16+ECX]
	SUB	EBX,DWORD [12+ECX]
	JS	L68
	MOV	EAX,DWORD [4+ECX]
	CMP	EBX,EAX
	JGE	L68
	TEST	ESI,ESI
	JS	L68
	CMP	ESI,DWORD [8+ECX]
	JGE	L68
	IMUL	EAX,ESI
	MOV	EDX,DWORD [ECX]
	ADD	EAX,EBX
	MOVZX	EAX,BYTE [EAX+EDX*1]
	CMP	EAX,DWORD [20+ECX]
	JE	L68
	MOV	EDX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [16+EDX]
	DEC	EAX
	PUSH	EAX
	PUSH	ECX
	CALL	_sheet_updown
	POP	ECX
	MOV	ECX,DWORD [-1116+EBP]
	POP	EAX
	CMP	DWORD [-1112+EBP],ECX
	JE	L72
	PUSH	ECX
	CALL	_keywin_off
	MOV	EAX,DWORD [-1112+EBP]
	PUSH	EAX
	MOV	DWORD [-1116+EBP],EAX
	CALL	_keywin_on
	POP	EAX
	POP	EDX
L72:
	CMP	EBX,2
	JLE	L73
	MOV	EDX,DWORD [-1112+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	EBX,EAX
	JGE	L73
	CMP	ESI,2
	JLE	L73
	CMP	ESI,20
	JG	L73
	MOV	ECX,DWORD [-1048+EBP]
	MOV	EAX,DWORD [-1052+EBP]
	MOV	DWORD [-1100+EBP],ECX
	MOV	EDX,DWORD [12+EDX]
	MOV	ECX,DWORD [-1112+EBP]
	MOV	DWORD [-1104+EBP],EAX
	MOV	DWORD [-1108+EBP],EDX
	MOV	ECX,DWORD [16+ECX]
	MOV	DWORD [-1068+EBP],ECX
L73:
	MOV	EAX,DWORD [-1112+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,EBX
	JG	L68
	LEA	EAX,DWORD [-5+EDX]
	CMP	EBX,EAX
	JGE	L68
	CMP	ESI,4
	JLE	L68
	CMP	ESI,18
	JG	L68
	MOV	EDX,DWORD [-1112+EBP]
	TEST	BYTE [28+EDX],16
	JE	L75
	MOV	EBX,DWORD [36+EDX]
	PUSH	LC3
	PUSH	DWORD [276+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	PUSH	0
	PUSH	-1
	PUSH	EBX
	CALL	_task_run
	ADD	ESP,20
L68:
	DEC	EDI
	JMP	L101
L75:
	MOV	ECX,DWORD [-1112+EBP]
	MOV	EBX,DWORD [36+ECX]
	PUSH	-1
	PUSH	ECX
	CALL	_sheet_updown
	PUSH	DWORD [-1116+EBP]
	CALL	_keywin_off
	MOV	EDX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [16+EDX]
	MOV	EAX,DWORD [16+EDX+EAX*4]
	PUSH	EAX
	MOV	DWORD [-1116+EBP],EAX
	CALL	_keywin_on
	CALL	_io_cli
	LEA	EAX,DWORD [16+EBX]
	PUSH	4
	PUSH	EAX
	CALL	_fifo32_put
	CALL	_io_sti
	ADD	ESP,24
	JMP	L68
L111:
	MOV	DWORD [-1052+EBP],0
	JMP	L61
L110:
	MOV	DWORD [-1048+EBP],0
	JMP	L60
L104:
	CMP	EDX,383
	JG	L28
	CMP	DWORD [-1084+EBP],0
	JNE	L29
	MOV	AL,BYTE [_keytable0.0-256+EDX]
L100:
	MOV	BYTE [-60+EBP],AL
L31:
	MOV	DL,BYTE [-60+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L32
	TEST	DWORD [-1088+EBP],4
	JNE	L95
	CMP	DWORD [-1084+EBP],0
	JE	L34
L32:
	MOV	AL,BYTE [-60+EBP]
	TEST	AL,AL
	JE	L36
	CMP	DWORD [-1116+EBP],0
	JE	L36
	MOVSX	EAX,AL
	MOV	EDX,DWORD [-1116+EBP]
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
L36:
	CMP	DWORD [-1040+EBP],271
	JE	L114
L37:
	MOV	EAX,DWORD [-1040+EBP]
	CMP	EAX,298
	JE	L115
L39:
	CMP	EAX,310
	JE	L116
L40:
	CMP	EAX,285
	JE	L117
L41:
	CMP	EAX,413
	JE	L118
L42:
	CMP	EAX,426
	JE	L119
L43:
	CMP	EAX,438
	JE	L120
L44:
	CMP	EAX,314
	JE	L121
L45:
	CMP	DWORD [-1040+EBP],325
	JE	L122
L46:
	CMP	DWORD [-1040+EBP],326
	JE	L123
L47:
	CMP	DWORD [-1040+EBP],315
	JE	L124
L48:
	CMP	DWORD [-1040+EBP],302
	JE	L125
L50:
	CMP	DWORD [-1040+EBP],316
	JE	L126
L52:
	CMP	DWORD [-1040+EBP],343
	JE	L127
L54:
	MOV	EAX,DWORD [-1040+EBP]
	CMP	EAX,506
	JE	L128
L55:
	CMP	EAX,510
	JNE	L14
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1092+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L98
L128:
	MOV	DWORD [-1092+EBP],-1
	JMP	L55
L127:
	MOV	ECX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [16+ECX]
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+ECX]
	CALL	_sheet_updown
	POP	ESI
	POP	EDI
	JMP	L54
L126:
	CMP	DWORD [-1084+EBP],0
	JE	L52
	CMP	DWORD [-1116+EBP],0
	JE	L53
	PUSH	DWORD [-1116+EBP]
	CALL	_keywin_off
	POP	EAX
L53:
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1044+EBP]
	CALL	_open_console
	PUSH	4
	PUSH	32
	PUSH	EAX
	MOV	DWORD [-1116+EBP],EAX
	CALL	_sheet_slide
	MOV	EDX,DWORD [-1044+EBP]
	PUSH	DWORD [16+EDX]
	PUSH	DWORD [-1116+EBP]
	CALL	_sheet_updown
	PUSH	DWORD [-1116+EBP]
	CALL	_keywin_on
	ADD	ESP,32
	JMP	L52
L125:
	CMP	DWORD [-1096+EBP],0
	JE	L50
	CMP	DWORD [-1116+EBP],0
	JE	L50
	MOV	EAX,DWORD [-1116+EBP]
	MOV	EBX,DWORD [36+EAX]
	TEST	EBX,EBX
	JE	L50
	CMP	DWORD [52+EBX],0
	JE	L50
	PUSH	LC2
	PUSH	DWORD [276+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	PUSH	0
	PUSH	-1
	PUSH	EBX
	CALL	_task_run
	ADD	ESP,20
	JMP	L50
L124:
	CMP	DWORD [-1084+EBP],0
	JE	L48
	CMP	DWORD [-1116+EBP],0
	JE	L48
	MOV	ECX,DWORD [-1116+EBP]
	MOV	EBX,DWORD [36+ECX]
	TEST	EBX,EBX
	JE	L48
	CMP	DWORD [52+EBX],0
	JE	L48
	PUSH	LC2
	PUSH	DWORD [276+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	PUSH	0
	PUSH	-1
	PUSH	EBX
	CALL	_task_run
	ADD	ESP,20
	JMP	L48
L123:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1088+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1088+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L47
L122:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1088+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1088+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L46
L121:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1088+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1088+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L45
L120:
	AND	DWORD [-1084+EBP],-3
	JMP	L44
L119:
	AND	DWORD [-1084+EBP],-2
	JMP	L43
L118:
	MOV	DWORD [-1096+EBP],0
	JMP	L42
L117:
	MOV	DWORD [-1096+EBP],1
	JMP	L41
L116:
	OR	DWORD [-1084+EBP],2
	JMP	L40
L115:
	OR	DWORD [-1084+EBP],1
	JMP	L39
L114:
	CMP	DWORD [-1116+EBP],0
	JE	L37
	PUSH	DWORD [-1116+EBP]
	CALL	_keywin_off
	MOV	ECX,DWORD [-1116+EBP]
	POP	EAX
	MOV	EDI,DWORD [24+ECX]
	DEC	EDI
	JNE	L38
	MOV	EAX,DWORD [-1044+EBP]
	MOV	EDI,DWORD [16+EAX]
	DEC	EDI
L38:
	MOV	EDX,DWORD [-1044+EBP]
	MOV	EDI,DWORD [20+EDX+EDI*4]
	PUSH	EDI
	MOV	DWORD [-1116+EBP],EDI
	CALL	_keywin_on
	POP	EAX
	JMP	L37
L34:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-60+EBP],AL
	JMP	L32
L95:
	CMP	DWORD [-1084+EBP],0
	JE	L32
	JMP	L34
L29:
	MOV	AL,BYTE [_keytable1.1-256+EDX]
	JMP	L100
L28:
	MOV	BYTE [-60+EBP],0
	JMP	L31
L103:
	CMP	DWORD [-1056+EBP],0
	JNS	L129
	CMP	DWORD [-1064+EBP],2147483647
	JNE	L130
	CALL	_io_sti
	PUSH	DWORD [-1080+EBP]
	CALL	_task_sleep
	JMP	L96
L130:
	CALL	_io_sti
	JMP	L99
L129:
	CALL	_io_sti
	PUSH	DWORD [-1060+EBP]
	PUSH	DWORD [-1056+EBP]
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1056+EBP],-1
	JMP	L97
L102:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1092+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1092+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L17
L2:
	PUSH	145472
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	ECX,EAX
	POP	EAX
	POP	EDX
	XOR	EDX,EDX
	MOV	DWORD [-1040+EBP],0
L8:
	MOV	AL,BYTE [_hankaku+EDX]
	MOV	BYTE [EDX+ECX*1],AL
	MOV	EAX,DWORD [-1040+EBP]
	INC	EAX
	MOV	DWORD [-1040+EBP],EAX
	MOV	EDX,EAX
	CMP	EAX,4095
	JLE	L8
	MOV	DWORD [-1040+EBP],4096
	MOV	EAX,4096
L13:
	MOV	BYTE [EAX+ECX*1],-1
	MOV	EAX,DWORD [-1040+EBP]
	INC	EAX
	MOV	DWORD [-1040+EBP],EAX
	CMP	EAX,145471
	JLE	L13
	JMP	L3
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L133
L131:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L133:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L131
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L136
L134:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L136:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L134
[SECTION .data]
LC4:
	DB	"command line",0x00
[SECTION .text]
	GLOBAL	_open_constask
_open_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	CALL	_task_alloc
	PUSH	512
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	65536
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [8+EBP]
	MOV	DWORD [76+EBX],_console_task
	MOV	DWORD [284+EBX],EAX
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [100+EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [272+EBX],LC4
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	2
	PUSH	EBX
	CALL	_task_run
	LEA	EAX,DWORD [16+EBX]
	PUSH	EBX
	PUSH	ESI
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC5:
	DB	"$commander$",0x00
[SECTION .text]
	GLOBAL	_open_console
_open_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	MOV	ESI,EAX
	PUSH	256
	PUSH	EAX
	PUSH	EBX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	0
	PUSH	LC5
	PUSH	165
	PUSH	256
	PUSH	ESI
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_make_textbox8
	ADD	ESP,44
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	CALL	_open_constask
	OR	DWORD [28+EBX],32
	MOV	DWORD [36+EBX],EAX
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_close_constask
_close_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_task_sleep
	PUSH	65536
	PUSH	DWORD [284+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	512
	PUSH	DWORD [16+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [4+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_close_console
_close_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [36+EBX]
	PUSH	42240
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	PUSH	ESI
	CALL	_close_constask
	CALL	_io_cli
	ADD	ESP,20
	MOV	EAX,DWORD [_taskctl]
	MOV	DWORD [4+ESI],0
	CMP	DWORD [4+EAX],ESI
	JE	L142
L141:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_sti
L142:
	MOV	DWORD [4+EAX],0
	JMP	L141
[SECTION .data]
LC6:
	DB	"%02X:%02X",0x00
[SECTION .text]
	GLOBAL	_printtime2
_printtime2:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,88
	CALL	_task_now
	MOVSX	EDX,WORD [4084]
	MOV	DWORD [-64+EBP],EAX
	MOV	DWORD [-72+EBP],EDX
	MOV	EAX,DWORD [4088]
	MOV	DWORD [-68+EBP],EAX
	MOVSX	EAX,WORD [4086]
	MOV	DWORD [-76+EBP],EAX
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	CALL	_readrtc
	LEA	EDX,DWORD [-44+EBP]
	MOVZX	EAX,BYTE [-59+EBP]
	PUSH	EAX
	MOVZX	EAX,BYTE [-58+EBP]
	PUSH	EAX
	PUSH	LC6
	PUSH	EDX
	CALL	_sprintf
	MOV	EDX,DWORD [-72+EBP]
	MOV	EAX,DWORD [-76+EBP]
	DEC	EDX
	SUB	EAX,28
	MOV	DWORD [-80+EBP],EDX
	PUSH	EAX
	PUSH	EDX
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [-76+EBP]
	ADD	ESP,48
	SUB	EAX,27
	PUSH	EAX
	PUSH	DWORD [-80+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [-76+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	DWORD [-84+EBP],EAX
	MOV	EAX,DWORD [-76+EBP]
	PUSH	DWORD [-80+EBP]
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EDI,DWORD [-76+EBP]
	ADD	ESP,56
	SUB	EDI,24
	PUSH	EDI
	PUSH	59
	PUSH	EDI
	PUSH	3
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EDX,DWORD [-76+EBP]
	SUB	EDX,4
	PUSH	EDX
	MOV	DWORD [-88+EBP],EDX
	PUSH	2
	PUSH	EDI
	PUSH	2
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-88+EBP]
	PUSH	59
	PUSH	DWORD [-88+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [-76+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [-76+EBP]
	SUB	EAX,23
	PUSH	59
	PUSH	EAX
	MOV	DWORD [-92+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EDX,DWORD [-76+EBP]
	ADD	ESP,56
	SUB	EDX,3
	MOV	DWORD [-96+EBP],EDX
	PUSH	EDX
	PUSH	59
	PUSH	EDX
	PUSH	2
	PUSH	0
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-96+EBP]
	PUSH	60
	PUSH	EDI
	PUSH	60
	PUSH	0
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	ESI,DWORD [-72+EBP]
	ADD	ESP,56
	SUB	ESI,47
	PUSH	EDI
	PUSH	ESI
	PUSH	EDI
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EBX,DWORD [-72+EBP]
	PUSH	EDI
	SUB	EBX,4
	PUSH	EBX
	PUSH	EDI
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-88+EBP]
	PUSH	ESI
	PUSH	DWORD [-92+EBP]
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-96+EBP]
	PUSH	EBX
	PUSH	DWORD [-96+EBP]
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [-72+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	DWORD [-96+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_boxfill8
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-76+EBP]
	PUSH	7
	SUB	EAX,22
	PUSH	EAX
	MOV	EAX,DWORD [-72+EBP]
	SUB	EAX,46
	PUSH	EAX
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-68+EBP]
	CALL	_putfonts8_asc
	MOV	EDX,DWORD [-72+EBP]
	ADD	ESP,52
	MOV	EAX,DWORD [-76+EBP]
	PUSH	DWORD [-84+EBP]
	PUSH	DWORD [-80+EBP]
	SUB	EAX,25
	SUB	EDX,48
	PUSH	EAX
	PUSH	EDX
	MOV	EDX,DWORD [-64+EBP]
	MOV	EAX,DWORD [276+EDX]
	PUSH	DWORD [EAX]
	CALL	_sheet_refresh
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
