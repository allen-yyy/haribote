     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    18 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    19 00000000                                 		GLOBAL  _asm_inthandler2e
    20 00000000                                 		GLOBAL	_memtest_sub
    21 00000000                                 		GLOBAL	_farjmp, _farcall
    22 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    23 00000000                                 		EXTERN	_inthandler20, _inthandler21
    24 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    25 00000000                                 		EXTERN	_inthandler0c, _inthandler2e
    26 00000000                                 		EXTERN	_hrb_api
    27 00000000                                 		GLOBAL  _clts, _fnsave, _frstor, _asm_inthandler07
    28 00000000                                 		GLOBAL	_WriteByteToPort, _ReadByteStringFromPor
    29 00000000                                 		GLOBAL	_WriteByteStringToPort, _ReadWordFromPort
    30 00000000                                 		GLOBAL	_WriteWordToPort, _ReadWordStringFromPort
    31 00000000                                 		GLOBAL	_WriteWordStringToPort, _inws
    32 00000000                                         EXTERN  _inthandler07
    33 00000000                                 
    34                                          [SECTION .text]
    35 00000000                                 
    36 00000000                                 _clts:          ; void clts(void);
    37 00000000 0F 06                                   CLTS
    38 00000002 C3                                      RET
    39 00000003                                 
    40 00000003                                 _fnsave:        ; void fnsave(int *addr);
    41 00000003 8B 44 24 04                             MOV     EAX,[ESP+4]     ; addr
    42 00000007 DD 30                                   FNSAVE  [EAX]
    43 00000009 C3                                      RET
    44 0000000A                                 
    45 0000000A                                 _frstor:        ; void frstor(int *addr);
    46 0000000A 8B 44 24 04                             MOV     EAX,[ESP+4]     ; addr
    47 0000000E DD 20                                   FRSTOR  [EAX]
    48 00000010 C3                                      RET
    49 00000011                                 
    50 00000011                                 _asm_inthandler07:
    51 00000011 FB                                      STI
    52 00000012 06                                      PUSH    ES
    53 00000013 1E                                      PUSH    DS
    54 00000014 60                                      PUSHAD
    55 00000015 89 E0                                   MOV     EAX,ESP
    56 00000017 50                                      PUSH    EAX
    57 00000018 66 8C D0                                MOV     AX,SS
    58 0000001B 8E D8                                   MOV     DS,AX
    59 0000001D 8E C0                                   MOV     ES,AX
    60 0000001F E8 [00000000]                           CALL    _inthandler07
    61 00000024 83 F8 00                                CMP     EAX,0
    62 00000027 0F 85 00000193                          JNE     _asm_end_app
    63 0000002D 58                                      POP     EAX
    64 0000002E 61                                      POPAD
    65 0000002F 1F                                      POP     DS
    66 00000030 07                                      POP     ES
    67 00000031 CF                                      IRETD                   ; INT07では ESP += 4; はいらない
    68 00000032                                 
    69 00000032                                 
    70 00000032                                 
    71 00000032                                 _io_hlt:	; void io_hlt(void);
    72 00000032 F4                              		HLT
    73 00000033 C3                              		RET
    74 00000034                                 
    75 00000034                                 _io_cli:	; void io_cli(void);
    76 00000034 FA                              		CLI
    77 00000035 C3                              		RET
    78 00000036                                 
    79 00000036                                 _io_sti:	; void io_sti(void);
    80 00000036 FB                              		STI
    81 00000037 C3                              		RET
    82 00000038                                 
    83 00000038                                 _io_stihlt:	; void io_stihlt(void);
    84 00000038 FB                              		STI
    85 00000039 F4                              		HLT
    86 0000003A C3                              		RET
    87 0000003B                                 
    88 0000003B                                 _io_in8:	; int io_in8(int port);
    89 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    90 0000003F B8 00000000                     		MOV		EAX,0
    91 00000044 EC                              		IN		AL,DX
    92 00000045 C3                              		RET
    93 00000046                                 
    94 00000046                                 _io_in16:	; int io_in16(int port);
    95 00000046 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    96 0000004A B8 00000000                     		MOV		EAX,0
    97 0000004F 66 ED                           		IN		AX,DX
    98 00000051 C3                              		RET
    99 00000052                                 
   100 00000052                                 _io_in32:	; int io_in32(int port);
   101 00000052 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   102 00000056 ED                              		IN		EAX,DX
   103 00000057 C3                              		RET
   104 00000058                                 
   105 00000058                                 _io_out8:	; void io_out8(int port, int data);
   106 00000058 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   107 0000005C 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
   108 00000060 EE                              		OUT		DX,AL
   109 00000061 C3                              		RET
   110 00000062                                 
   111 00000062                                 _io_out16:	; void io_out16(int port, int data);
   112 00000062 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   113 00000066 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   114 0000006A 66 EF                           		OUT		DX,AX
   115 0000006C C3                              		RET
   116 0000006D                                 
   117 0000006D                                 _io_out32:	; void io_out32(int port, int data);
   118 0000006D 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   119 00000071 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   120 00000075 EF                              		OUT		DX,EAX
   121 00000076 C3                              		RET
   122 00000077                                 
   123 00000077                                 _io_load_eflags:	; int io_load_eflags(void);
   124 00000077 9C                              		PUSHFD		; PUSH EFLAGS という意味
   125 00000078 58                              		POP		EAX
   126 00000079 C3                              		RET
   127 0000007A                                 
   128 0000007A                                 _io_store_eflags:	; void io_store_eflags(int eflags);
   129 0000007A 8B 44 24 04                     		MOV		EAX,[ESP+4]
   130 0000007E 50                              		PUSH	EAX
   131 0000007F 9D                              		POPFD		; POP EFLAGS という意味
   132 00000080 C3                              		RET
   133 00000081                                 
   134 00000081                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
   135 00000081 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   136 00000086 66 89 44 24 06                  		MOV		[ESP+6],AX
   137 0000008B 0F 01 54 24 06                  		LGDT	[ESP+6]
   138 00000090 C3                              		RET
   139 00000091                                 
   140 00000091                                 _load_idtr:		; void load_idtr(int limit, int addr);
   141 00000091 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   142 00000096 66 89 44 24 06                  		MOV		[ESP+6],AX
   143 0000009B 0F 01 5C 24 06                  		LIDT	[ESP+6]
   144 000000A0 C3                              		RET
   145 000000A1                                 
   146 000000A1                                 _load_cr0:		; int load_cr0(void);
   147 000000A1 0F 20 C0                        		MOV		EAX,CR0
   148 000000A4 C3                              		RET
   149 000000A5                                 
   150 000000A5                                 _store_cr0:		; void store_cr0(int cr0);
   151 000000A5 8B 44 24 04                     		MOV		EAX,[ESP+4]
   152 000000A9 0F 22 C0                        		MOV		CR0,EAX
   153 000000AC C3                              		RET
   154 000000AD                                 
   155 000000AD                                 _load_tr:		; void load_tr(int tr);
   156 000000AD 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   157 000000B2 C3                              		RET
   158 000000B3                                 
   159 000000B3                                 _asm_inthandler20:
   160 000000B3 06                              		PUSH	ES
   161 000000B4 1E                              		PUSH	DS
   162 000000B5 60                              		PUSHAD
   163 000000B6 89 E0                           		MOV		EAX,ESP
   164 000000B8 50                              		PUSH	EAX
   165 000000B9 66 8C D0                        		MOV		AX,SS
   166 000000BC 8E D8                           		MOV		DS,AX
   167 000000BE 8E C0                           		MOV		ES,AX
   168 000000C0 E8 [00000000]                   		CALL	_inthandler20
   169 000000C5 58                              		POP		EAX
   170 000000C6 61                              		POPAD
   171 000000C7 1F                              		POP		DS
   172 000000C8 07                              		POP		ES
   173 000000C9 CF                              		IRETD
   174 000000CA                                 
   175 000000CA                                 _asm_inthandler21:
   176 000000CA 06                              		PUSH	ES
   177 000000CB 1E                              		PUSH	DS
   178 000000CC 60                              		PUSHAD
   179 000000CD 89 E0                           		MOV		EAX,ESP
   180 000000CF 50                              		PUSH	EAX
   181 000000D0 66 8C D0                        		MOV		AX,SS
   182 000000D3 8E D8                           		MOV		DS,AX
   183 000000D5 8E C0                           		MOV		ES,AX
   184 000000D7 E8 [00000000]                   		CALL	_inthandler21
   185 000000DC 58                              		POP		EAX
   186 000000DD 61                              		POPAD
   187 000000DE 1F                              		POP		DS
   188 000000DF 07                              		POP		ES
   189 000000E0 CF                              		IRETD
   190 000000E1                                 
   191 000000E1                                 _asm_inthandler2c:
   192 000000E1 06                              		PUSH	ES
   193 000000E2 1E                              		PUSH	DS
   194 000000E3 60                              		PUSHAD
   195 000000E4 89 E0                           		MOV		EAX,ESP
   196 000000E6 50                              		PUSH	EAX
   197 000000E7 66 8C D0                        		MOV		AX,SS
   198 000000EA 8E D8                           		MOV		DS,AX
   199 000000EC 8E C0                           		MOV		ES,AX
   200 000000EE E8 [00000000]                   		CALL	_inthandler2c
   201 000000F3 58                              		POP		EAX
   202 000000F4 61                              		POPAD
   203 000000F5 1F                              		POP		DS
   204 000000F6 07                              		POP		ES
   205 000000F7 CF                              		IRETD
   206 000000F8                                 
   207 000000F8                                 _asm_inthandler0c:
   208 000000F8 FB                              		STI
   209 000000F9 06                              		PUSH	ES
   210 000000FA 1E                              		PUSH	DS
   211 000000FB 60                              		PUSHAD
   212 000000FC 89 E0                           		MOV		EAX,ESP
   213 000000FE 50                              		PUSH	EAX
   214 000000FF 66 8C D0                        		MOV		AX,SS
   215 00000102 8E D8                           		MOV		DS,AX
   216 00000104 8E C0                           		MOV		ES,AX
   217 00000106 E8 [00000000]                   		CALL	_inthandler0c
   218 0000010B 83 F8 00                        		CMP		EAX,0
   219 0000010E 0F 85 000000AC                  		JNE		_asm_end_app
   220 00000114 58                              		POP		EAX
   221 00000115 61                              		POPAD
   222 00000116 1F                              		POP		DS
   223 00000117 07                              		POP		ES
   224 00000118 83 C4 04                        		ADD		ESP,4			; INT 0x0c でも、これが必要
   225 0000011B CF                              		IRETD
   226 0000011C                                 
   227 0000011C                                 _asm_inthandler0d:
   228 0000011C FB                              		STI
   229 0000011D 06                              		PUSH	ES
   230 0000011E 1E                              		PUSH	DS
   231 0000011F 60                              		PUSHAD
   232 00000120 89 E0                           		MOV		EAX,ESP
   233 00000122 50                              		PUSH	EAX
   234 00000123 66 8C D0                        		MOV		AX,SS
   235 00000126 8E D8                           		MOV		DS,AX
   236 00000128 8E C0                           		MOV		ES,AX
   237 0000012A E8 [00000000]                   		CALL	_inthandler0d
   238 0000012F 83 F8 00                        		CMP		EAX,0			; ここだけ違う
   239 00000132 0F 85 00000088                  		JNE		_asm_end_app	; ここだけ違う
   240 00000138 58                              		POP		EAX
   241 00000139 61                              		POPAD
   242 0000013A 1F                              		POP		DS
   243 0000013B 07                              		POP		ES
   244 0000013C 83 C4 04                        		ADD		ESP,4			; INT 0x0d では、これが必要
   245 0000013F CF                              		IRETD
   246 00000140                                 
   247 00000140                                 _asm_inthandler2e:
   248 00000140 06                              		PUSH	ES
   249 00000141 1E                              		PUSH	DS
   250 00000142 60                              		PUSHAD
   251 00000143 89 E0                           		MOV		EAX,ESP
   252 00000145 50                              		PUSH	EAX
   253 00000146 66 8C D0                        		MOV		AX,SS
   254 00000149 8E D8                           		MOV		DS,AX
   255 0000014B 8E C0                           		MOV		ES,AX
   256 0000014D E8 [00000000]                   		CALL	_inthandler2e
   257 00000152 58                              		POP		EAX
   258 00000153 61                              		POPAD
   259 00000154 1F                              		POP		DS
   260 00000155 07                              		POP		ES
   261 00000156 CF                              		IRETD
   262 00000157                                 
   263 00000157                                 
   264 00000157                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   265 00000157 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   266 00000158 56                              		PUSH	ESI
   267 00000159 53                              		PUSH	EBX
   268 0000015A BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   269 0000015F BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   270 00000164 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   271 00000168                                 mts_loop:
   272 00000168 89 C3                           		MOV		EBX,EAX
   273 0000016A 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   274 00000170 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   275 00000172 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   276 00000174 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   277 00000177 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   278 00000179 75 18                           		JNE		mts_fin
   279 0000017B 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   280 0000017E 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   281 00000180 75 11                           		JNE		mts_fin
   282 00000182 89 13                           		MOV		[EBX],EDX				; *p = old;
   283 00000184 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   284 00000189 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   285 0000018D 76 D9                           		JBE		mts_loop
   286 0000018F 5B                              		POP		EBX
   287 00000190 5E                              		POP		ESI
   288 00000191 5F                              		POP		EDI
   289 00000192 C3                              		RET
   290 00000193                                 mts_fin:
   291 00000193 89 13                           		MOV		[EBX],EDX				; *p = old;
   292 00000195 5B                              		POP		EBX
   293 00000196 5E                              		POP		ESI
   294 00000197 5F                              		POP		EDI
   295 00000198 C3                              		RET
   296 00000199                                 
   297 00000199                                 _farjmp:		; void farjmp(int eip, int cs);
   298 00000199 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   299 0000019D C3                              		RET
   300 0000019E                                 
   301 0000019E                                 _farcall:		; void farcall(int eip, int cs);
   302 0000019E FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   303 000001A2 C3                              		RET
   304 000001A3                                 
   305 000001A3                                 _asm_hrb_api:
   306 000001A3 FB                              		STI
   307 000001A4 1E                              		PUSH	DS
   308 000001A5 06                              		PUSH	ES
   309 000001A6 60                              		PUSHAD		; 保存のためのPUSH
   310 000001A7 60                              		PUSHAD		; hrb_apiにわたすためのPUSH
   311 000001A8 66 8C D0                        		MOV		AX,SS
   312 000001AB 8E D8                           		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
   313 000001AD 8E C0                           		MOV		ES,AX
   314 000001AF E8 [00000000]                   		CALL	_hrb_api
   315 000001B4 83 F8 00                        		CMP		EAX,0		; EAXが0でなければアプリ終了処理
   316 000001B7 75 07                           		JNE		_asm_end_app
   317 000001B9 83 C4 20                        		ADD		ESP,32
   318 000001BC 61                              		POPAD
   319 000001BD 07                              		POP		ES
   320 000001BE 1F                              		POP		DS
   321 000001BF CF                              		IRETD
   322 000001C0                                 _asm_end_app:
   323 000001C0                                 ;	EAXはtss.esp0の番地
   324 000001C0 8B 20                           		MOV		ESP,[EAX]
   325 000001C2 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   326 000001C9 61                              		POPAD
   327 000001CA C3                              		RET					; cmd_appへ帰る
   328 000001CB                                 
   329 000001CB                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   330 000001CB 60                              		PUSHAD		; 32ビットレジスタを全部保存しておく
   331 000001CC 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用のEIP
   332 000001D0 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用のCS
   333 000001D4 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用のESP
   334 000001D8 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
   335 000001DC 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   336 000001E0 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   337 000001E3 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   338 000001E6 8E C3                           		MOV		ES,BX
   339 000001E8 8E DB                           		MOV		DS,BX
   340 000001EA 8E E3                           		MOV		FS,BX
   341 000001EC 8E EB                           		MOV		GS,BX
   342 000001EE                                 ;	以下はRETFでアプリに行かせるためのスタック調整
   343 000001EE 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をORする
   344 000001F1 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をORする
   345 000001F4 53                              		PUSH	EBX				; アプリのSS
   346 000001F5 52                              		PUSH	EDX				; アプリのESP
   347 000001F6 51                              		PUSH	ECX				; アプリのCS
   348 000001F7 50                              		PUSH	EAX				; アプリのEIP
   349 000001F8 CB                              		RETF
   350 000001F9                                 ;	アプリが終了してもここには来ない
   351 000001F9                                 
   352 000001F9                                 ;_shutdown:
   353 000001F9                                 ;		MOV AX,5301H
   354 000001F9                                 ;		XOR BX,BX
   355 000001F9                                 ;		INT 0x15 
   356 000001F9                                 
   357 000001F9                                 _WriteByteToPort:
   358 000001F9 55                              		push ebp
   359 000001FA 89 E5                           		mov ebp,esp
   360 000001FC 52                              		push edx
   361 000001FD                                 		mov al,byte ptr [ebp + 8]
      >> [ERROR #002] parameter error.
   362 000001FD                                 		mov dx,word ptr [ebp + 12]
      >> [ERROR #002] parameter error.
   363 000001FD EE                              		out dx,al
   364 000001FE 5A                              		pop edx
   365 000001FF C9                              		leave
   366 00000200 C3                              		retn
   367 00000201                                 
   368 00000201                                 _ReadByteStringFromPort:
   369 00000201 55                              		push ebp
   370 00000202 89 E5                           		mov ebp,esp
   371 00000204 51                              		push ecx
   372 00000205 52                              		push edx
   373 00000206 57                              		push edi
   374 00000207                                 		mov edi,dword ptr [ebp + 8]
      >> [ERROR #002] parameter error.
   375 00000207                                 		mov ecx,dword ptr [ebp + 12]
      >> [ERROR #002] parameter error.
   376 00000207                                 		mov dx,word ptr [ebp + 16]
      >> [ERROR #002] parameter error.
   377 00000207 F3 6C                           		rep insb
   378 00000209 5F                              		pop edi
   379 0000020A 5A                              		pop edx
   380 0000020B 59                              		pop ecx
   381 0000020C C9                              		leave
   382 0000020D C3                              		retn
   383 0000020E                                 
   384 0000020E                                 
   385 0000020E                                 
   386 0000020E                                 _WriteByteStringToPort:
   387 0000020E 55                              		push ebp
   388 0000020F 89 E5                           		mov ebp,esp
   389 00000211 51                              		push ecx
   390 00000212 52                              		push edx
   391 00000213 56                              		push esi
   392 00000214                                 		mov esi,dword ptr [ebp + 8]
      >> [ERROR #002] parameter error.
   393 00000214                                 		mov ecx,dword ptr [ebp + 12]
      >> [ERROR #002] parameter error.
   394 00000214                                 		mov dx,word ptr [ebp + 16]
      >> [ERROR #002] parameter error.
   395 00000214 F3 6E                           		rep outsb
   396 00000216 5E                              		pop esi
   397 00000217 5A                              		pop edx
   398 00000218 59                              		pop ecx
   399 00000219 C9                              		leave
   400 0000021A C3                              		retn
   401 0000021B                                 
   402 0000021B                                 _ReadWordFromPort:
   403 0000021B 55                              		push ebp
   404 0000021C 89 E5                           		mov ebp,esp
   405 0000021E 53                              		push ebx
   406 0000021F 52                              		push edx
   407 00000220                                 		mov dx,word ptr [ebp + 0x0c]
      >> [ERROR #002] parameter error.
   408 00000220                                 		mov ebx,dword ptr [ebp + 0x08]
      >> [ERROR #002] parameter error.
   409 00000220 66 ED                           		in ax,dx
   410 00000222                                 		mov word ptr [ebx],ax
      >> [ERROR #002] parameter error.
   411 00000222 5A                              		pop edx
   412 00000223 5B                              		pop ebx
   413 00000224 C9                              		leave
   414 00000225 C3                              		retn
   415 00000226                                 
   416 00000226                                 
   417 00000226                                 _WriteWordToPort:
   418 00000226 55                              		push ebp
   419 00000227 89 E5                           		mov ebp,esp
   420 00000229 66 52                           		push dx
   421 0000022B                                 		mov dx,word ptr [ebp + 0x0c]
      >> [ERROR #002] parameter error.
   422 0000022B                                 		mov ax,word ptr [ebp + 0x08]
      >> [ERROR #002] parameter error.
   423 0000022B 66 EF                           		out dx,ax
   424 0000022D 66 5A                           		pop dx
   425 0000022F C9                              		leave
   426 00000230 C3                              		retn
   427 00000231                                 
   428 00000231                                 _ReadWordStringFromPort:
   429 00000231 55                              		push ebp
   430 00000232 89 E5                           		mov ebp,esp
   431 00000234 51                              		push ecx
   432 00000235 52                              		push edx
   433 00000236 57                              		push edi
   434 00000237                                 		mov edi,dword ptr [ebp + 0x08]
      >> [ERROR #002] parameter error.
   435 00000237                                 		mov ecx,dword ptr [ebp + 0x0c]
      >> [ERROR #002] parameter error.
   436 00000237 D1 E9                           		shr ecx,0x01
   437 00000239                                 		mov dx,  word ptr [ebp + 0x10]
      >> [ERROR #002] parameter error.
   438 00000239 FC                              		cld
   439 0000023A F3 66 6D                        		rep insw
   440 0000023D 5F                              		pop edi
   441 0000023E 5A                              		pop edx
   442 0000023F 59                              		pop ecx
   443 00000240 C9                              		leave
   444 00000241 C3                              		retn
   445 00000242                                 
   446 00000242                                 
   447 00000242                                 
   448 00000242                                 
   449 00000242                                 _WriteWordStringToPort:
   450 00000242 55                              		push ebp
   451 00000243 89 E5                           		mov ebp,esp
   452 00000245 51                              		push ecx
   453 00000246 52                              		push edx
   454 00000247 56                              		push esi
   455 00000248                                 		mov esi,dword ptr [ebp + 0x08]
      >> [ERROR #002] parameter error.
   456 00000248                                 		mov ecx,dword ptr [ebp + 0x0c]
      >> [ERROR #002] parameter error.
   457 00000248 C1 E9 02                        		shr ecx,0x02
   458 0000024B                                 		mov dx,  word ptr [ebp + 0x10]
      >> [ERROR #002] parameter error.
   459 0000024B F3 66 6F                        		rep outsw
   460 0000024E 5E                              		pop esi
   461 0000024F 5A                              		pop edx
   462 00000250 59                              		pop ecx
   463 00000251 C9                              		leave
   464 00000252 C3                              		retn
   465 00000253                                 
   466 00000253                                 _inws:
   467 00000253 8B 7C 24 04                     	mov	edi, [esp + 4]	; buf
   468 00000257 8B 4C 24 08                     	mov	ecx, [esp + 4 + 4]	; port
   469 0000025B 8B 54 24 0C                     	mov	edx, [esp + 4 + 4 + 4]   ; n
   470 0000025F D1 E9                           	shr	ecx, 1
   471 00000261 FC                              	cld
   472 00000262 F3 66 6D                        	rep	insw
   473 00000265 C3                              	ret