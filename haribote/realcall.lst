     1 00000000                                 ; 
     2 00000000                                 ; Protected Mode BIOS Call Functionailty v2.0 - by Napalm
     3 00000000                                 ; -------------------------------------------------------
     4 00000000                                 ; 
     5 00000000                                 ; This is code shows how its POSSIBLE to execute BIOS interrupts
     6 00000000                                 ; by switch out to real-mode and then back into protected mode.
     7 00000000                                 ; 
     8 00000000                                 ; If you wish to use all or part of this code you must agree
     9 00000000                                 ; to the license at the following URL.
    10 00000000                                 ; 
    11 00000000                                 ; License: http://creativecommons.org/licenses/by-sa/2.0/uk/
    12 00000000                                 ;         
    13 00000000                                 ; Notes: This file is in NASM syntax.
    14 00000000                                 ;        Turn off paging before calling these functions.
    15 00000000                                 ;        int32() resets all selectors.
    16 00000000                                 ;
    17 00000000                                 ; C Prototype:
    18 00000000                                 ;	void _cdelc int32(unsigned char intnum, regs16_t *regs);
    19 00000000                                 ; 
    20 00000000                                 ; Example of usage:
    21 00000000                                 ;   regs.ax = 0x0013;
    22 00000000                                 ;   int32(0x10, &regs);
    23 00000000                                 ;   memset((char *)0xA0000, 1, (320*200));
    24 00000000                                 ;   memset((char *)0xA0000 + (100*320+80), 14, 80);
    25 00000000                                 ;   regs.ax = 0x0000;
    26 00000000                                 ;   int32(0x16, &regs);
    27 00000000                                 ;   regs.ax = 0x0003;
    28 00000000                                 ;   int32(0x10, &regs);
    29 00000000                                 ; 
    30 00000000                                 ; 
    31 00000000                                 [bits 32]
    32 00000000                                 
    33 00000000                                 global int32, _int32
    34 00000000                                 
    35 00000000                                 struc regs16_t
      >> [ERROR #001] syntax error.
    36 00000000 0000                            	.di	resw 1
    37 00000002 0000                            	.si	resw 1
    38 00000004 0000                            	.bp	resw 1
    39 00000006 0000                            	.sp resw 1
    40 00000008 0000                            	.bx	resw 1
    41 0000000A 0000                            	.dx	resw 1
    42 0000000C 0000                            	.cx	resw 1
    43 0000000E 0000                            	.ax	resw 1
    44 00000010 0000                            	.gs	resw 1
    45 00000012 0000                            	.fs	resw 1
    46 00000014 0000                            	.es	resw 1
    47 00000016 0000                            	.ds	resw 1
    48 00000018 0000                            	.ef resw 1
    49 0000001A                                 endstruc
    50 0000001A                                 
    51 0000001A                                 %define INT32_BASE                             0x7C00
      >> [ERROR #001] syntax error.
    52 0000001A                                 %define REBASE(x)                              (((x) - reloc) + INT32_BASE)
      >> [ERROR #007] label definition error.
    53 0000001A                                 %define GDTENTRY(x)                            ((x) << 3)
      >> [ERROR #007] label definition error.
    54 0000001A                                 %define CODE32                                 GDTENTRY(1)	; 0x08
      >> [ERROR #007] label definition error.
    55 0000001A                                 %define DATA32                                 GDTENTRY(2)	; 0x10
      >> [ERROR #007] label definition error.
    56 0000001A                                 %define CODE16                                 GDTENTRY(3)	; 0x18
      >> [ERROR #007] label definition error.
    57 0000001A                                 %define DATA16                                 GDTENTRY(4)	; 0x20
      >> [ERROR #007] label definition error.
    58 0000001A                                 %define STACK16                                (INT32_BASE - regs16_t_size)
      >> [ERROR #007] label definition error.
    59 0000001A                                 
    60 0000001A                                 
    61 0000001A                                 section .text
      >> [ERROR #001] syntax error.
    62 0000001A                                 	int32: use32                               ; by Napalm
      >> [ERROR #001] syntax error.
    63 0000001A                                 	_int32:
    64 0000001A FA                              		cli                                    ; disable interrupts
    65 0000001B                                 		pusha                                  ; save register state to 32bit stack
    66 0000001B                                 		mov  esi, reloc                        ; set source to code below
      >> [ERROR #003] data size error.
    67 0000001B                                 		mov  edi, INT32_BASE                   ; set destination to new base address
      >> [ERROR #003] data size error.
    68 0000001B                                 		mov  ecx, (int32_end - reloc)          ; set copy size to our codes size
      >> [ERROR #003] data size error.
    69 0000001B FC                              		cld                                    ; clear direction flag (so we copy forward)
    70 0000001C F3 A4                           		rep  movsb                             ; do the actual copy (relocate code to low 16bit space)
    71 0000001E EA 00000000 07C0                		jmp 0x7C0 : 0                          ; jump to new code location
    72 00000025                                 	reloc: use32                               ; by Napalm
      >> [ERROR #001] syntax error.
    73 00000025                                 		mov  [REBASE(stack32_ptr)], esp        ; save 32bit stack pointer
      >> [ERROR #002] parameter error.
    74 00000025                                 		sidt [REBASE(idt32_ptr)]               ; save 32bit idt pointer
      >> [ERROR #001] syntax error.
    75 00000025                                 		sgdt [REBASE(gdt32_ptr)]               ; save 32bit gdt pointer
      >> [ERROR #001] syntax error.
    76 00000025                                 		lgdt [REBASE(gdt16_ptr)]               ; load 16bit gdt pointer
      >> [ERROR #001] syntax error.
    77 00000025                                 		lea  esi, [esp+0x24]                   ; set position of intnum on 32bit stack
      >> [ERROR #004] data type error.
    78 00000025                                 		lodsd                                  ; read intnum into eax
    79 00000025                                 		mov  [REBASE(ib)], al                  ; set intrrupt immediate byte from our arguments 
      >> [ERROR #002] parameter error.
    80 00000025                                 		mov  esi, [esi]                        ; read regs pointer in esi as source
      >> [ERROR #004] data type error.
    81 00000025                                 		mov  edi, STACK16                      ; set destination to 16bit stack
      >> [ERROR #003] data size error.
    82 00000025                                 		mov  ecx, regs16_t_size                ; set copy size to our struct size
      >> [ERROR #003] data size error.
    83 00000025                                 		mov  esp, edi                          ; save destination to as 16bit stack offset
      >> [ERROR #003] data size error.
    84 00000025 F3 A4                           		rep  movsb                             ; do the actual copy (32bit stack to 16bit stack)
    85 00000027                                 		jmp  word CODE16:REBASE(p_mode16)      ; switch to 16bit selector (16bit protected mode)
      >> [ERROR #002] parameter error.
    86 00000027                                 	p_mode16: use16
      >> [ERROR #001] syntax error.
    87 00000027 66 B8 0000                      		mov  ax, DATA16                        ; get our 16bit data selector
      >> [ERROR #012] expression error.
    88 0000002B 8E D8                           		mov  ds, ax                            ; set ds to 16bit selector
    89 0000002D 8E C0                           		mov  es, ax                            ; set es to 16bit selector
    90 0000002F                                 		mov  fs, ax                            ; set fs to 16bit selector
      >> [ERROR #004] data type error.
    91 0000002F                                 		mov  gs, ax                            ; set gs to 16bit selector
      >> [ERROR #004] data type error.
    92 0000002F                                 		mov  ss, ax                             set ss to 16bit selector
      >> [ERROR #002] parameter error.
    93 0000002F                                 		mov  eax, cr0                          ; get cr0 so we can modify it
      >> [ERROR #003] data size error.
    94 0000002F 24 FE                           		and  al,  ~0x01                        ; mask off PE bit to turn off protected mode
    95 00000031                                 		mov  cr0, eax                          ; set cr0 to result
      >> [ERROR #003] data size error.
    96 00000031                                 		jmp  word 0x0000:REBASE(r_mode16)      ; finally set cs:ip to enter real-mode
      >> [ERROR #002] parameter error.
    97 00000031                                 	r_mode16: use16
      >> [ERROR #001] syntax error.
    98 00000031 66 31 C0                        		xor  ax, ax                            ; set ax to zero
    99 00000034 8E D8                           		mov  ds, ax                            ; set ds so we can access idt16
   100 00000036                                 		mov  ss, ax                             set ss so they the stack is valid
      >> [ERROR #002] parameter error.
   101 00000036                                 		lidt [REBASE(idt16_ptr)]               ; load 16bit idt
      >> [ERROR #001] syntax error.
   102 00000036 66 BB 0870                      		mov  bx, 0x0870                        ; master 8 and slave 112
   103 0000003A E8 0000002E                     		call resetpic                          ; set pic's the to real-mode settings
   104 0000003F                                 		popa                                   ; load general purpose registers from 16bit stack
   105 0000003F                                 		pop  gs                                ; load gs from 16bit stack
      >> [ERROR #002] parameter error.
   106 0000003F                                 		pop  fs                                ; load fs from 16bit stack
      >> [ERROR #002] parameter error.
   107 0000003F 07                              		pop  es                                ; load es from 16bit stack
   108 00000040 1F                              		pop  ds                                ; load ds from 16bit stack
   109 00000041 FB                              		sti                                    ; enable interrupts
   110 00000042 CD                              		db 0xCD                                ; opcode of INT instruction with immediate byte
   111 00000043 00                              	ib: db 0x00
   112 00000044 FA                              		cli                                    ; disable interrupts
   113 00000045 66 31 E4                        		xor  sp, sp                            ; zero sp so we can reuse it
   114 00000048 8E D4                           		mov  ss, sp                            ; set ss so the stack is valid
   115 0000004A 66 BC 0000                      		mov  sp, INT32_BASE                    ; set correct stack position so we can copy back
      >> [ERROR #012] expression error.
   116 0000004E 9C                              		pushf                                  ; save eflags to 16bit stack
   117 0000004F 1E                              		push ds                                ; save ds to 16bit stack
   118 00000050 06                              		push es                                ; save es to 16bit stack
   119 00000051 6A 00                           		push fs                                ; save fs to 16bit stack
      >> [ERROR #012] expression error.
   120 00000053 6A 00                           		push gs                                ; save gs to 16bit stack
      >> [ERROR #012] expression error.
   121 00000055                                 		pusha                                  ; save general purpose registers to 16bit stack
      >> [ERROR #007] label definition error.
   122 00000055 66 BB 2028                      		mov  bx, 0x2028                        ; master 32 and slave 40
   123 00000059 E8 0000000F                     		call resetpic                          ; restore the pic's to protected mode settings
   124 0000005E                                 		mov  eax, cr0                          ; get cr0 so we can modify it
      >> [ERROR #003] data size error.
   125 0000005E                                 		inc  eax                               ; set PE bit to turn on protected mode
      >> [ERROR #002] parameter error.
   126 0000005E                                 		mov  cr0, eax                          ; set cr0 to result
      >> [ERROR #003] data size error.
   127 0000005E                                 		jmp  dword CODE32:REBASE(p_mode32)     ; switch to 32bit selector (32bit protected mode)
      >> [ERROR #002] parameter error.
   128 0000005E                                 	p_mode32: use32
      >> [ERROR #001] syntax error.
   129 0000005E 66 B8 0000                      		mov  ax, DATA32                        ; get our 32bit data selector
      >> [ERROR #012] expression error.
   130 00000062 8E D8                           		mov  ds, ax                            ; reset ds selector
   131 00000064 8E C0                           		mov  es, ax                            ; reset es selector
   132 00000066                                 		mov  fs, ax                            ; reset fs selector
      >> [ERROR #004] data type error.
   133 00000066                                 		mov  gs, ax                            ; reset gs selector
      >> [ERROR #004] data type error.
   134 00000066 8E D0                           		mov  ss, ax                            ; reset ss selector
   135 00000068                                 		lgdt [REBASE(gdt32_ptr)]               ; restore 32bit gdt pointer
      >> [ERROR #007] label definition error.
   136 00000068                                 		lidt [REBASE(idt32_ptr)]               ; restore 32bit idt pointer
      >> [ERROR #007] label definition error.
   137 00000068                                 		mov  esp, [REBASE(stack32_ptr)]        ; restore 32bit stack pointer
      >> [ERROR #002] parameter error.
   138 00000068                                 		mov  esi, STACK16                      ; set copy source to 16bit stack
      >> [ERROR #003] data size error.
   139 00000068                                 		lea  edi, [esp+0x28]                   ; set position of regs pointer on 32bit stack
      >> [ERROR #004] data type error.
   140 00000068                                 		mov  edi, [edi]                        ; use regs pointer in edi as copy destination
      >> [ERROR #004] data type error.
   141 00000068                                 		mov  ecx, regs16_t_size                ; set copy size to our struct size
      >> [ERROR #003] data size error.
   142 00000068 FC                              		cld                                    ; clear direction flag (so we copy forward)
   143 00000069 F3 A4                           		rep  movsb                             ; do the actual copy (16bit stack to 32bit stack)
   144 0000006B                                 		popa                                   ; restore registers
      >> [ERROR #007] label definition error.
   145 0000006B FB                              		sti                                    ; enable interrupts
   146 0000006C C3                              		ret                                    ; return to caller
   147 0000006D                                 		
   148 0000006D                                 	resetpic:                                  ; reset's 8259 master and slave pic vectors
   149 0000006D 66 50                           		push ax                                ; expects bh = master vector, bl = slave vector
   150 0000006F B0 11                           		mov  al, 0x11                          ; 0x11 = ICW1_INIT | ICW1_ICW4
   151 00000071 E6 20                           		out  0x20, al                          ; send ICW1 to master pic
   152 00000073 E6 A0                           		out  0xA0, al                          ; send ICW1 to slave pic
   153 00000075 88 F8                           		mov  al, bh                            ; get master pic vector param
   154 00000077 E6 21                           		out  0x21, al                          ; send ICW2 aka vector to master pic
   155 00000079 88 D8                           		mov  al, bl                            ; get slave pic vector param
   156 0000007B E6 A1                           		out  0xA1, al                          ; send ICW2 aka vector to slave pic
   157 0000007D B0 04                           		mov  al, 0x04                          ; 0x04 = set slave to IRQ2
   158 0000007F E6 21                           		out  0x21, al                          ; send ICW3 to master pic
   159 00000081 D0 E8                           		shr  al, 1                             ; 0x02 = tell slave its on IRQ2 of master
   160 00000083 E6 A1                           		out  0xA1, al                          ; send ICW3 to slave pic
   161 00000085 D0 E8                           		shr  al, 1                             ; 0x01 = ICW4_8086
   162 00000087 E6 21                           		out  0x21, al                          ; send ICW4 to master pic
   163 00000089 E6 A1                           		out  0xA1, al                          ; send ICW4 to slave pic
   164 0000008B 66 58                           		pop  ax                                ; restore ax from stack
   165 0000008D C3                              		ret                                    ; return to caller
   166 0000008E                                 		
   167 0000008E                                 	stack32_ptr:                               ; address in 32bit stack after we
   168 0000008E 00000000                        		dd 0x00000000                          ;   save all general purpose registers
   169 00000092                                 		
   170 00000092                                 	idt32_ptr:                                 ; IDT table pointer for 32bit access
   171 00000092 0000                            		dw 0x0000                              ; table limit (size)
   172 00000094 00000000                        		dd 0x00000000                          ; table base address
   173 00000098                                 		
   174 00000098                                 	gdt32_ptr:                                 ; GDT table pointer for 32bit access
   175 00000098 0000                            		dw 0x0000                              ; table limit (size)
   176 0000009A 00000000                        		dd 0x00000000                          ; table base address
   177 0000009E                                 		
   178 0000009E                                 	idt16_ptr:                                 ; IDT table pointer for 16bit access
   179 0000009E 03FF                            		dw 0x03FF                              ; table limit (size)
   180 000000A0 00000000                        		dd 0x00000000                          ; table base address
   181 000000A4                                 		
   182 000000A4                                 	gdt16_base:                                ; GDT descriptor table
   183 000000A4                                 		.null:                                 ; 0x00 - null segment descriptor
   184 000000A4 00000000                        			dd 0x00000000                      ; must be left zero'd
   185 000000A8 00000000                        			dd 0x00000000                      ; must be left zero'd
   186 000000AC                                 			
   187 000000AC                                 		.code32:                               ; 0x01 - 32bit code segment descriptor 0xFFFFFFFF
   188 000000AC FFFF                            			dw 0xFFFF                          ; limit  0:15
   189 000000AE 0000                            			dw 0x0000                          ; base   0:15
   190 000000B0 00                              			db 0x00                            ; base  16:23
   191 000000B1 9A                              			db 0x9A                            ; present, iopl/0, code, execute/read
   192 000000B2 CF                              			db 0xCF                            ; 4Kbyte granularity, 32bit selector; limit 16:19
   193 000000B3 00                              			db 0x00                            ; base  24:31
   194 000000B4                                 			
   195 000000B4                                 		.data32:                               ; 0x02 - 32bit data segment descriptor 0xFFFFFFFF
   196 000000B4 FFFF                            			dw 0xFFFF                          ; limit  0:15
   197 000000B6 0000                            			dw 0x0000                          ; base   0:15
   198 000000B8 00                              			db 0x00                            ; base  16:23
   199 000000B9 92                              			db 0x92                            ; present, iopl/0, data, read/write
   200 000000BA CF                              			db 0xCF                            ; 4Kbyte granularity, 32bit selector; limit 16:19
   201 000000BB 00                              			db 0x00                            ; base  24:31
   202 000000BC                                 			
   203 000000BC                                 		.code16:                               ; 0x03 - 16bit code segment descriptor 0x000FFFFF
   204 000000BC FFFF                            			dw 0xFFFF                          ; limit  0:15
   205 000000BE 0000                            			dw 0x0000                          ; base   0:15
   206 000000C0 00                              			db 0x00                            ; base  16:23
   207 000000C1 9A                              			db 0x9A                            ; present, iopl/0, code, execute/read
   208 000000C2 0F                              			db 0x0F                            ; 1Byte granularity, 16bit selector; limit 16:19
   209 000000C3 00                              			db 0x00                            ; base  24:31
   210 000000C4                                 			
   211 000000C4                                 		.data16:                               ; 0x04 - 16bit data segment descriptor 0x000FFFFF
   212 000000C4 FFFF                            			dw 0xFFFF                          ; limit  0:15
   213 000000C6 0000                            			dw 0x0000                          ; base   0:15
   214 000000C8 00                              			db 0x00                            ; base  16:23
   215 000000C9 92                              			db 0x92                            ; present, iopl/0, data, read/write
   216 000000CA 0F                              			db 0x0F                            ; 1Byte granularity, 16bit selector; limit 16:19
   217 000000CB 00                              			db 0x00                            ; base  24:31
   218 000000CC                                 			
   219 000000CC                                 	gdt16_ptr:                                 ; GDT table pointer for 16bit access
   220 000000CC 0027                            		dw gdt16_ptr - gdt16_base - 1          ; table limit (size)
   221 000000CE 000000A4                        		dd gdt16_base                          ; table base address
   222 000000D2                                 		
   223 000000D2                                 	int32_end:                                 ; end marker (so we can copy the code)
   224 000000D2                                 	
   225 000000D2                                 	