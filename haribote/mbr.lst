     1 00000000                                 ; haribote-ipl
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00000028                              CYLS	EQU		40				; どこまで読み込むか
     5 00000000                                 
     6                                          		ORG		0x7c00			; このプログラムがどこに読み込まれるのか
     7 00007C00                                 
     8 00007C00                                 ; 以下は標準的なFAT12フォーマットフロッピーディスクのための記述
     9 00007C00                                 
    10 00007C00 EB 4E                           		JMP		entry
    11 00007C02 90                              		DB		0x90
    12 00007C03 48 41 52 49 42 4F 54 45         		DB		"HARIBOTE"		; ブートセクタの名前を自由に書いてよい（8バイト）
    13 00007C0B 0200                            		DW		512				; 1セクタの大きさ（512にしなければいけない）
    14 00007C0D 01                              		DB		1				; クラスタの大きさ（1セクタにしなければいけない）
    15 00007C0E 0001                            		DW		1				; FATがどこから始まるか（普通は1セクタ目からにする）
    16 00007C10 02                              		DB		2				; FATの個数（2にしなければいけない）
    17 00007C11 00E0                            		DW		224				; ルートディレクトリ領域の大きさ（普通は224エントリにする）
    18 00007C13 0000                            		DW		0				; このドライブの大きさ（2880セクタにしなければいけない）
    19 00007C15 F8                              		DB		0xf8			; メディアのタイプ（0xf0にしなければいけない）
    20 00007C16 0009                            		DW		9				; FAT領域の長さ（9セクタにしなければいけない）
    21 00007C18 0012                            		DW		18				; 1トラックにいくつのセクタがあるか（18にしなければいけない）
    22 00007C1A 0002                            		DW		2				; ヘッドの数（2にしなければいけない）
    23 00007C1C 00000000                        		DD		0				; パーティションを使ってないのでここは必ず0
    24 00007C20 00000B40                        		DD		2880			; このドライブ大きさをもう一度書く
    25 00007C24 80 00 29                        		DB		0x80,0,0x29		; よくわからないけどこの値にしておくといいらしい
    26 00007C27 FFFFFFFF                        		DD		0xffffffff		; たぶんボリュームシリアル番号
    27 00007C2B 48 41 52 49 42 4F 54 45 4F 53   		DB		"HARIBOTEOS "	; ディスクの名前（11バイト）
       00007C35 20 
    28 00007C36 46 41 54 31 32 20 20 20         		DB		"FAT12   "		; フォーマットの名前（8バイト）
    29 00007C3E 00 00 00 00 00 00 00 00 00 00   		RESB	18				; とりあえず18バイトあけておく
       00007C48 00 00 00 00 00 00 00 00 
    30 00007C50                                 
    31 00007C50                                 ; プログラム本体				
    32 00007C50                                 
    33 00007C50                                 entry:
    34 00007C50 B8 0000                         		MOV		AX,0			; レジスタ初期化
    35 00007C53 8E D0                           		MOV		SS,AX
    36 00007C55 BC 7C00                         		MOV		SP,0x7c00
    37 00007C58 8E D8                           		MOV		DS,AX
    38 00007C5A                                 
    39 00007C5A                                 ; ディスクを読む
    40 00007C5A                                 
    41 00007C5A B8 0820                         		MOV		AX,0x0820
    42 00007C5D 8E C0                           		MOV		ES,AX
    43 00007C5F E8 0008                         		CALL	read_hd		; 高速読み込み
    44 00007C62                                 
    45 00007C62                                 ; 読み終わったのでharibote.sysを実行だ！
    46 00007C62                                 
    47 00007C62 C6 06 0FF0 28                   		MOV		BYTE [0x0ff0],CYLS	; IPLがどこまで読んだのかをメモ
    48 00007C67 E9 4596                         		JMP		0xc200
    49 00007C6A                                 
    50 00007C6A                                 read_hd:
    51 00007C6A BE 7C8B                         		mov si, DAPACK		
    52 00007C6D B4 42                           		mov ah, 0x42
    53 00007C6F B2 80                           		mov dl, 0x80
    54 00007C71 CD 13                           		int 0x13
    55 00007C73 72 00                           		jc short .error
    56 00007C75                                 
    57 00007C75                                 .error:
    58 00007C75 B8 0000                         		MOV		AX,0
    59 00007C78 8E C0                           		MOV		ES,AX
    60 00007C7A BE 7C7D                         		MOV		SI,msg
    61 00007C7D                                 ;putloop:
    62 00007C7D                                 ;		MOV		AL,[SI]
    63 00007C7D                                 ;		ADD		SI,1			; SIに1を足す
    64 00007C7D                                 ;		CMP		AL,0
    65 00007C7D                                 ;		JE		fin
    66 00007C7D                                 ;		MOV		AH,0x0e			; 一文字表示ファンクション
    67 00007C7D                                 ;		MOV		BX,15			; カラーコード
    68 00007C7D                                 ;		INT		0x10			; ビデオBIOS呼び出し
    69 00007C7D                                 ;		JMP		putloop
    70 00007C7D                                 ;fin:
    71 00007C7D                                 ;		HLT						; 何かあるまでCPUを停止させる
    72 00007C7D                                 ;		JMP		fin				; 無限ループ
    73 00007C7D                                 msg:
    74 00007C7D 0A 0A                           		DB		0x0a, 0x0a		; 改行を2つ
    75 00007C7F 6C 6F 61 64 20 65 72 72 6F 72   		DB		"load error"
    76 00007C89 0A                              		DB		0x0a			; 改行
    77 00007C8A 00                              		DB		0
    78 00007C8B                                 
    79 00007C8B                                 ;readfast:	; ALを使ってできるだけまとめて読み出す
    80 00007C8B                                 ;	ES:読み込み番地, CH:シリンダ, DH:ヘッド, CL:セクタ, BX:読み込みセクタ数
    81 00007C8B                                 
    82 00007C8B                                 ;		MOV		AX,ES			; < ESからALの最大値を計算 >
    83 00007C8B                                 ;		SHL		AX,3			; AXを32で割って、その結果をAHに入れたことになる （SHLは左シフト命令）
    84 00007C8B                                 ;		AND		AH,0x7f			; AHはAHを128で割った余り（512*128=64K）
    85 00007C8B                                 ;		MOV		AL,128			; AL = 128 - AH; 一番近い64KB境界まで最大何セクタ入るか
    86 00007C8B                                 ;		SUB		AL,AH
    87 00007C8B                                 
    88 00007C8B                                 ;		MOV		AH,BL			; < BXからALの最大値をAHに計算 >
    89 00007C8B                                 ;		CMP		BH,0			; if (BH != 0) { AH = 18; }
    90 00007C8B                                 ;		JE		.skip1
    91 00007C8B                                 ;		MOV		AH,18
    92 00007C8B                                 ;.skip1:
    93 00007C8B                                 ;		CMP		AL,AH			; if (AL > AH) { AL = AH; }
    94 00007C8B                                 ;		JBE		.skip2
    95 00007C8B                                 ;		MOV		AL,AH
    96 00007C8B                                 ;.skip2:
    97 00007C8B                                 ;
    98 00007C8B                                 ;		MOV		AH,19			; < CLからALの最大値をAHに計算 >
    99 00007C8B                                 ;		SUB		AH,CL			; AH = 19 - CL;
   100 00007C8B                                 ;		CMP		AL,AH			; if (AL > AH) { AL = AH; }
   101 00007C8B                                 ;		JBE		.skip3
   102 00007C8B                                 ;		MOV		AL,AH
   103 00007C8B                                 ;.skip3:
   104 00007C8B                                 ;
   105 00007C8B                                 ;		PUSH	BX
   106 00007C8B                                 ;		MOV		SI,0			; 失敗回数を数えるレジスタ
   107 00007C8B                                 ;retry:
   108 00007C8B                                 ;		MOV		AH,0x02			; AH=0x02 : ディスク読み込み
   109 00007C8B                                 ;		MOV		BX,0
   110 00007C8B                                 ;		MOV		DL,0x00			; Aドライブ
   111 00007C8B                                 ;		PUSH	ES
   112 00007C8B                                 ;		PUSH	DX
   113 00007C8B                                 ;		PUSH	CX
   114 00007C8B                                 ;		PUSH	AX
   115 00007C8B                                 ;		INT		0x13			; ディスクBIOS呼び出し
   116 00007C8B                                 ;		JNC		next			; エラーがおきなければnextへ
   117 00007C8B                                 ;		ADD		SI,1			; SIに1を足す
   118 00007C8B                                 ;		CMP		SI,5			; SIと5を比較
   119 00007C8B                                 ;		JAE		error			; SI >= 5 だったらerrorへ
   120 00007C8B                                 ;		MOV		AH,0x00
   121 00007C8B                                 ;		MOV		DL,0x00			; Aドライブ
   122 00007C8B                                 ;		INT		0x13			; ドライブのリセット
   123 00007C8B                                 ;		POP		AX
   124 00007C8B                                 ;		POP		CX
   125 00007C8B                                 ;		POP		DX
   126 00007C8B                                 ;		POP		ES
   127 00007C8B                                 ;		JMP		retry
   128 00007C8B                                 ;next:
   129 00007C8B                                 ;		POP		AX
   130 00007C8B                                 ;		POP		CX
   131 00007C8B                                 ;		POP		DX
   132 00007C8B                                 ;		POP		BX				; ESの内容をBXで受け取る
   133 00007C8B                                 ;		SHR		BX,5			; BXを16バイト単位から512バイト単位へ
   134 00007C8B                                 ;		MOV		AH,0
   135 00007C8B                                 ;		ADD		BX,AX			; BX += AL;
   136 00007C8B                                 ;		SHL		BX,5			; BXを512バイト単位から16バイト単位へ
   137 00007C8B                                 ;		MOV		ES,BX			; これで ES += AL * 0x20; になる
   138 00007C8B                                 ;		POP		BX
   139 00007C8B                                 ;		SUB		BX,AX
   140 00007C8B                                 ;		JZ		.ret
   141 00007C8B                                 ;		ADD		CL,AL			; CLにALを足す
   142 00007C8B                                 ;		CMP		CL,18			; CLと18を比較
   143 00007C8B                                 ;		JBE		readfast		; CL <= 18 だったらreadfastへ
   144 00007C8B                                 ;		MOV		CL,1
   145 00007C8B                                 ;		ADD		DH,1
   146 00007C8B                                 ;		CMP		DH,2
   147 00007C8B                                 ;		JB		readfast		; DH < 2 だったらreadfastへ
   148 00007C8B                                 ;		MOV		DH,0
   149 00007C8B                                 ;		ADD		CH,1
   150 00007C8B                                 ;		JMP		readfast
   151 00007C8B                                 ;.ret:
   152 00007C8B                                 ;		RET
   153 00007C8B                                 DAPACK:
   154 00007C8B 10                              		DB	0x10
   155 00007C8C 00                              		DB	0
   156 00007C8D 0500                            blkcnt:	DW	1280		
   157 00007C8F 8200                            db_add:	DW	0x8200
   158 00007C91 0000                            		DW	0
   159 00007C93 00000001                        d_lba:	DD	1
   160 00007C97 00000000                        		DD	0
   161 00007C9B                                 
   162 00007C9B 00 00 00 00 00 00 00 00 00 00   		RESB	0x7dfe-$		; 0x7dfeまでを0x00で埋める命令
       00007CA5 00 00 00 00 00 00 00 00 00 00 
       00007CAF 00 00 00 00 00 00 00 00 00 00 
       00007CB9 00 00 00 00 00 00 00 00 00 00 
       00007CC3 00 00 00 00 00 00 00 00 00 00 
       00007CCD 00 00 00 00 00 00 00 00 00 00 
       00007CD7 00 00 00 00 00 00 00 00 00 00 
       00007CE1 00 00 00 00 00 00 00 00 00 00 
       00007CEB 00 00 00 00 00 00 00 00 00 00 
       00007CF5 00 00 00 00 00 00 00 00 00 00 
       00007CFF 00 00 00 00 00 00 00 00 00 00 
       00007D09 00 00 00 00 00 00 00 00 00 00 
       00007D13 00 00 00 00 00 00 00 00 00 00 
       00007D1D 00 00 00 00 00 00 00 00 00 00 
       00007D27 00 00 00 00 00 00 00 00 00 00 
       00007D31 00 00 00 00 00 00 00 00 00 00 
       00007D3B 00 00 00 00 00 00 00 00 00 00 
       00007D45 00 00 00 00 00 00 00 00 00 00 
       00007D4F 00 00 00 00 00 00 00 00 00 00 
       00007D59 00 00 00 00 00 00 00 00 00 00 
       00007D63 00 00 00 00 00 00 00 00 00 00 
       00007D6D 00 00 00 00 00 00 00 00 00 00 
       00007D77 00 00 00 00 00 00 00 00 00 00 
       00007D81 00 00 00 00 00 00 00 00 00 00 
       00007D8B 00 00 00 00 00 00 00 00 00 00 
       00007D95 00 00 00 00 00 00 00 00 00 00 
       00007D9F 00 00 00 00 00 00 00 00 00 00 
       00007DA9 00 00 00 00 00 00 00 00 00 00 
       00007DB3 00 00 00 00 00 00 00 00 00 00 
       00007DBD 00 00 00 00 00 00 00 00 00 00 
       00007DC7 00 00 00 00 00 00 00 00 00 00 
       00007DD1 00 00 00 00 00 00 00 00 00 00 
       00007DDB 00 00 00 00 00 00 00 00 00 00 
       00007DE5 00 00 00 00 00 00 00 00 00 00 
       00007DEF 00 00 00 00 00 00 00 00 00 00 
       00007DF9 00 00 00 00 00 
   163 00007DFE                                 
   164 00007DFE 55 AA                           		DB		0x55, 0xaa
