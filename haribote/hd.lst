     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
<<<<<<< Updated upstream
     6 00000000                                 	EXTERN	_WriteByteToPort
     7 00000000                                 	EXTERN	_io_in8
     8 00000000                                 	EXTERN	_ReadWordStringFromPort
     9 00000000                                 	EXTERN	_WriteWordStringToPort
    10 00000000                                 	EXTERN	_io_out8
    11 00000000                                 	EXTERN	_inws
    12 00000000                                 	EXTERN	_io_cli
    13 00000000                                 	EXTERN	_message_receive
    14 00000000                                 	EXTERN	_message_send
    15 00000000                                 	EXTERN	_task_alloc
    16 00000000                                 	EXTERN	_memman_alloc_4k
    17 00000000                                 	EXTERN	_task_run
    18 00000000                                 [FILE "hd.c"]
    19                                          [SECTION .text]
    20 00000000                                 	GLOBAL	_ReadHDSector
    21 00000000                                 _ReadHDSector:
    22 00000000 55                              	PUSH	EBP
    23 00000001 89 E5                           	MOV	EBP,ESP
    24 00000003 57                              	PUSH	EDI
    25 00000004 56                              	PUSH	ESI
    26 00000005 31 F6                           	XOR	ESI,ESI
    27 00000007 53                              	PUSH	EBX
    28 00000008 51                              	PUSH	ECX
    29 00000009 8A 45 10                        	MOV	AL,BYTE [16+EBP]
    30 0000000C 8A 55 14                        	MOV	DL,BYTE [20+EBP]
    31 0000000F 88 45 F3                        	MOV	BYTE [-13+EBP],AL
    32 00000012 88 55 F2                        	MOV	BYTE [-14+EBP],DL
    33 00000015 31 C0                           	XOR	EAX,EAX
    34 00000017 8A 5D 18                        	MOV	BL,BYTE [24+EBP]
    35 0000001A 0F B6 7D 0C                     	MOVZX	EDI,BYTE [12+EBP]
    36 0000001E 83 7D 08 00                     	CMP	DWORD [8+EBP],0
    37 00000022 74 07                           	JE	L1
    38 00000024 31 C0                           	XOR	EAX,EAX
    39 00000026 80 FB 1F                        	CMP	BL,31
    40 00000029 76 08                           	JBE	L23
    41 0000002B                                 L1:
    42 0000002B 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
    43 0000002E 5B                              	POP	EBX
    44 0000002F 5E                              	POP	ESI
    45 00000030 5F                              	POP	EDI
    46 00000031 5D                              	POP	EBP
    47 00000032 C3                              	RET
    48 00000033                                 L23:
    49 00000033 68 000003F6                     	PUSH	1014
    50 00000038 6A 00                           	PUSH	0
    51 0000003A E8 [00000000]                   	CALL	_WriteByteToPort
    52 0000003F 58                              	POP	EAX
    53 00000040 5A                              	POP	EDX
    54 00000041                                 L9:
    55 00000041 68 000001F7                     	PUSH	503
    56 00000046 E8 [00000000]                   	CALL	_io_in8
    57 0000004B 59                              	POP	ECX
    58 0000004C 84 C0                           	TEST	AL,AL
    59 0000004E 78 07                           	JS	L8
    60 00000050 83 E0 40                        	AND	EAX,64
    61 00000053 84 C0                           	TEST	AL,AL
    62 00000055 75 0A                           	JNE	L5
    63 00000057                                 L8:
    64 00000057 46                              	INC	ESI
    65 00000058 83 FE FF                        	CMP	ESI,-1
    66 0000005B 75 E4                           	JNE	L9
    67 0000005D                                 L14:
    68 0000005D 31 C0                           	XOR	EAX,EAX
    69 0000005F EB CA                           	JMP	L1
    70 00000061                                 L5:
    71 00000061 46                              	INC	ESI
    72 00000062 74 F9                           	JE	L14
    73 00000064 88 D8                           	MOV	AL,BL
    74 00000066 83 E0 10                        	AND	EAX,16
    75 00000069 0F B6 C0                        	MOVZX	EAX,AL
    76 0000006C 85 C0                           	TEST	EAX,EAX
    77 0000006E 0F 84 00000099                  	JE	L12
    78 00000074 83 F8 10                        	CMP	EAX,16
    79 00000077 75 E4                           	JNE	L14
    80 00000079 83 CB F0                        	OR	EBX,-16
    81 0000007C                                 L11:
    82 0000007C 68 000001F1                     	PUSH	497
    83 00000081 6A 4B                           	PUSH	75
    84 00000083 E8 [00000000]                   	CALL	_WriteByteToPort
    85 00000088 68 000001F2                     	PUSH	498
    86 0000008D 6A 01                           	PUSH	1
    87 0000008F E8 [00000000]                   	CALL	_WriteByteToPort
    88 00000094 89 FA                           	MOV	EDX,EDI
    89 00000096 0F B6 C2                        	MOVZX	EAX,DL
    90 00000099 68 000001F3                     	PUSH	499
    91 0000009E 50                              	PUSH	EAX
    92 0000009F E8 [00000000]                   	CALL	_WriteByteToPort
    93 000000A4 68 000001F4                     	PUSH	500
    94 000000A9 0F B6 45 F3                     	MOVZX	EAX,BYTE [-13+EBP]
    95 000000AD 50                              	PUSH	EAX
    96 000000AE E8 [00000000]                   	CALL	_WriteByteToPort
    97 000000B3 83 C4 20                        	ADD	ESP,32
    98 000000B6 0F B6 45 F2                     	MOVZX	EAX,BYTE [-14+EBP]
    99 000000BA 68 000001F5                     	PUSH	501
   100 000000BF 50                              	PUSH	EAX
   101 000000C0 E8 [00000000]                   	CALL	_WriteByteToPort
   102 000000C5 68 000001F6                     	PUSH	502
   103 000000CA 0F B6 C3                        	MOVZX	EAX,BL
   104 000000CD 50                              	PUSH	EAX
   105 000000CE E8 [00000000]                   	CALL	_WriteByteToPort
   106 000000D3 68 000001F7                     	PUSH	503
   107 000000D8 6A 20                           	PUSH	32
   108 000000DA E8 [00000000]                   	CALL	_WriteByteToPort
   109 000000DF 83 C4 18                        	ADD	ESP,24
   110 000000E2                                 L20:
   111 000000E2 68 000001F7                     	PUSH	503
   112 000000E7 E8 [00000000]                   	CALL	_io_in8
   113 000000EC 5A                              	POP	EDX
   114 000000ED 84 C0                           	TEST	AL,AL
   115 000000EF 78 F1                           	JS	L20
   116 000000F1 68 000001F0                     	PUSH	496
   117 000000F6 68 00000200                     	PUSH	512
   118 000000FB FF 75 08                        	PUSH	DWORD [8+EBP]
   119 000000FE E8 [00000000]                   	CALL	_ReadWordStringFromPort
   120 00000103 B8 00000001                     	MOV	EAX,1
   121 00000108 E9 FFFFFF1E                     	JMP	L1
   122 0000010D                                 L12:
   123 0000010D 83 E3 0F                        	AND	EBX,15
   124 00000110 83 EB 20                        	SUB	EBX,32
   125 00000113 E9 FFFFFF64                     	JMP	L11
   126 00000118                                 	GLOBAL	_WriteHDSector
   127 00000118                                 _WriteHDSector:
   128 00000118 55                              	PUSH	EBP
   129 00000119 89 E5                           	MOV	EBP,ESP
   130 0000011B 57                              	PUSH	EDI
   131 0000011C 56                              	PUSH	ESI
   132 0000011D 31 F6                           	XOR	ESI,ESI
   133 0000011F 53                              	PUSH	EBX
   134 00000120 50                              	PUSH	EAX
   135 00000121 8A 45 10                        	MOV	AL,BYTE [16+EBP]
   136 00000124 8A 55 14                        	MOV	DL,BYTE [20+EBP]
   137 00000127 88 45 F3                        	MOV	BYTE [-13+EBP],AL
   138 0000012A 88 55 F2                        	MOV	BYTE [-14+EBP],DL
   139 0000012D 31 C0                           	XOR	EAX,EAX
   140 0000012F 8A 5D 18                        	MOV	BL,BYTE [24+EBP]
   141 00000132 0F B6 7D 0C                     	MOVZX	EDI,BYTE [12+EBP]
   142 00000136 83 7D 08 00                     	CMP	DWORD [8+EBP],0
   143 0000013A 74 07                           	JE	L24
   144 0000013C 31 C0                           	XOR	EAX,EAX
   145 0000013E 80 FB 1F                        	CMP	BL,31
   146 00000141 76 08                           	JBE	L46
   147 00000143                                 L24:
   148 00000143 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
   149 00000146 5B                              	POP	EBX
   150 00000147 5E                              	POP	ESI
   151 00000148 5F                              	POP	EDI
   152 00000149 5D                              	POP	EBP
   153 0000014A C3                              	RET
   154 0000014B                                 L46:
   155 0000014B 68 000003F6                     	PUSH	1014
   156 00000150 6A 00                           	PUSH	0
   157 00000152 E8 [00000000]                   	CALL	_WriteByteToPort
   158 00000157 59                              	POP	ECX
   159 00000158 58                              	POP	EAX
   160 00000159                                 L32:
   161 00000159 68 000001F7                     	PUSH	503
   162 0000015E E8 [00000000]                   	CALL	_io_in8
   163 00000163 5A                              	POP	EDX
   164 00000164 84 C0                           	TEST	AL,AL
   165 00000166 78 07                           	JS	L31
   166 00000168 83 E0 40                        	AND	EAX,64
   167 0000016B 84 C0                           	TEST	AL,AL
   168 0000016D 75 0A                           	JNE	L28
   169 0000016F                                 L31:
   170 0000016F 46                              	INC	ESI
   171 00000170 83 FE FF                        	CMP	ESI,-1
   172 00000173 75 E4                           	JNE	L32
   173 00000175                                 L37:
   174 00000175 31 C0                           	XOR	EAX,EAX
   175 00000177 EB CA                           	JMP	L24
   176 00000179                                 L28:
   177 00000179 46                              	INC	ESI
   178 0000017A 74 F9                           	JE	L37
   179 0000017C 88 D8                           	MOV	AL,BL
   180 0000017E 83 E0 10                        	AND	EAX,16
   181 00000181 0F B6 C0                        	MOVZX	EAX,AL
   182 00000184 85 C0                           	TEST	EAX,EAX
   183 00000186 0F 84 00000099                  	JE	L35
   184 0000018C 83 F8 10                        	CMP	EAX,16
   185 0000018F 75 E4                           	JNE	L37
   186 00000191 83 CB F0                        	OR	EBX,-16
   187 00000194                                 L34:
   188 00000194 68 000001F1                     	PUSH	497
   189 00000199 6A 4B                           	PUSH	75
   190 0000019B E8 [00000000]                   	CALL	_WriteByteToPort
   191 000001A0 68 000001F2                     	PUSH	498
   192 000001A5 6A 01                           	PUSH	1
   193 000001A7 E8 [00000000]                   	CALL	_WriteByteToPort
   194 000001AC 89 FA                           	MOV	EDX,EDI
   195 000001AE 0F B6 C2                        	MOVZX	EAX,DL
   196 000001B1 68 000001F3                     	PUSH	499
   197 000001B6 50                              	PUSH	EAX
   198 000001B7 E8 [00000000]                   	CALL	_WriteByteToPort
   199 000001BC 68 000001F4                     	PUSH	500
   200 000001C1 0F B6 45 F3                     	MOVZX	EAX,BYTE [-13+EBP]
   201 000001C5 50                              	PUSH	EAX
   202 000001C6 E8 [00000000]                   	CALL	_WriteByteToPort
   203 000001CB 83 C4 20                        	ADD	ESP,32
   204 000001CE 0F B6 45 F2                     	MOVZX	EAX,BYTE [-14+EBP]
   205 000001D2 68 000001F5                     	PUSH	501
   206 000001D7 50                              	PUSH	EAX
   207 000001D8 E8 [00000000]                   	CALL	_WriteByteToPort
   208 000001DD 68 000001F6                     	PUSH	502
   209 000001E2 0F B6 C3                        	MOVZX	EAX,BL
   210 000001E5 50                              	PUSH	EAX
   211 000001E6 E8 [00000000]                   	CALL	_WriteByteToPort
   212 000001EB 68 000001F7                     	PUSH	503
   213 000001F0 6A 30                           	PUSH	48
   214 000001F2 E8 [00000000]                   	CALL	_WriteByteToPort
   215 000001F7 83 C4 18                        	ADD	ESP,24
   216 000001FA                                 L43:
   217 000001FA 68 000001F7                     	PUSH	503
   218 000001FF E8 [00000000]                   	CALL	_io_in8
   219 00000204 5B                              	POP	EBX
   220 00000205 84 C0                           	TEST	AL,AL
   221 00000207 78 F1                           	JS	L43
   222 00000209 68 000001F0                     	PUSH	496
   223 0000020E 68 00000200                     	PUSH	512
   224 00000213 FF 75 08                        	PUSH	DWORD [8+EBP]
   225 00000216 E8 [00000000]                   	CALL	_WriteWordStringToPort
   226 0000021B B8 00000001                     	MOV	EAX,1
   227 00000220 E9 FFFFFF1E                     	JMP	L24
   228 00000225                                 L35:
   229 00000225 83 E3 0F                        	AND	EBX,15
   230 00000228 83 EB 20                        	SUB	EBX,32
   231 0000022B E9 FFFFFF64                     	JMP	L34
   232 00000230                                 _WaitForRdy:
   233 00000230 55                              	PUSH	EBP
   234 00000231 89 E5                           	MOV	EBP,ESP
   235 00000233 56                              	PUSH	ESI
   236 00000234 53                              	PUSH	EBX
   237 00000235 BB 00010000                     	MOV	EBX,65536
   238 0000023A 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
   239 0000023D                                 L53:
   240 0000023D 0F B7 C6                        	MOVZX	EAX,SI
   241 00000240 50                              	PUSH	EAX
   242 00000241 E8 [00000000]                   	CALL	_io_in8
   243 00000246 5A                              	POP	EDX
   244 00000247 83 E0 40                        	AND	EAX,64
   245 0000024A 84 C0                           	TEST	AL,AL
   246 0000024C 75 03                           	JNE	L49
   247 0000024E 4B                              	DEC	EBX
   248 0000024F 75 EC                           	JNE	L53
   249 00000251                                 L49:
   250 00000251 8D 65 F8                        	LEA	ESP,DWORD [-8+EBP]
   251 00000254 B8 00000001                     	MOV	EAX,1
   252 00000259 5B                              	POP	EBX
   253 0000025A 5E                              	POP	ESI
   254 0000025B 5D                              	POP	EBP
   255 0000025C C3                              	RET
   256 0000025D                                 _WaitForBsy:
   257 0000025D 55                              	PUSH	EBP
   258 0000025E 89 E5                           	MOV	EBP,ESP
   259 00000260 57                              	PUSH	EDI
   260 00000261 56                              	PUSH	ESI
   261 00000262 31 FF                           	XOR	EDI,EDI
   262 00000264 53                              	PUSH	EBX
   263 00000265 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
   264 00000268 BB 00010000                     	MOV	EBX,65536
   265 0000026D                                 L60:
   266 0000026D 0F B7 C6                        	MOVZX	EAX,SI
   267 00000270 50                              	PUSH	EAX
   268 00000271 E8 [00000000]                   	CALL	_io_in8
   269 00000276 59                              	POP	ECX
   270 00000277 84 C0                           	TEST	AL,AL
   271 00000279 79 0D                           	JNS	L61
   272 0000027B 4B                              	DEC	EBX
   273 0000027C 75 EF                           	JNE	L60
   274 0000027E                                 L56:
   275 0000027E 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
   276 00000281 89 F8                           	MOV	EAX,EDI
   277 00000283 5B                              	POP	EBX
   278 00000284 5E                              	POP	ESI
   279 00000285 5F                              	POP	EDI
   280 00000286 5D                              	POP	EBP
   281 00000287 C3                              	RET
   282 00000288                                 L61:
   283 00000288 BF 00000001                     	MOV	EDI,1
   284 0000028D EB EF                           	JMP	L56
   285 0000028F                                 _WaitForDrq:
   286 0000028F 55                              	PUSH	EBP
   287 00000290 89 E5                           	MOV	EBP,ESP
   288 00000292 57                              	PUSH	EDI
   289 00000293 56                              	PUSH	ESI
   290 00000294 31 FF                           	XOR	EDI,EDI
   291 00000296 53                              	PUSH	EBX
   292 00000297 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
   293 0000029A BB 00010000                     	MOV	EBX,65536
   294 0000029F                                 L68:
   295 0000029F 0F B7 C6                        	MOVZX	EAX,SI
   296 000002A2 50                              	PUSH	EAX
   297 000002A3 E8 [00000000]                   	CALL	_io_in8
   298 000002A8 5A                              	POP	EDX
   299 000002A9 83 E0 08                        	AND	EAX,8
   300 000002AC 84 C0                           	TEST	AL,AL
   301 000002AE 75 0D                           	JNE	L69
   302 000002B0 4B                              	DEC	EBX
   303 000002B1 75 EC                           	JNE	L68
   304 000002B3                                 L64:
   305 000002B3 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
   306 000002B6 89 F8                           	MOV	EAX,EDI
   307 000002B8 5B                              	POP	EBX
   308 000002B9 5E                              	POP	ESI
   309 000002BA 5F                              	POP	EDI
   310 000002BB 5D                              	POP	EBP
   311 000002BC C3                              	RET
   312 000002BD                                 L69:
   313 000002BD BF 00000001                     	MOV	EDI,1
   314 000002C2 EB EF                           	JMP	L64
   315 000002C4                                 _CmdSucc:
   316 000002C4 55                              	PUSH	EBP
   317 000002C5 89 E5                           	MOV	EBP,ESP
   318 000002C7 0F B7 45 08                     	MOVZX	EAX,WORD [8+EBP]
   319 000002CB 50                              	PUSH	EAX
   320 000002CC E8 [00000000]                   	CALL	_io_in8
   321 000002D1 59                              	POP	ECX
   322 000002D2 0F BE C0                        	MOVSX	EAX,AL
   323 000002D5 F7 D0                           	NOT	EAX
   324 000002D7 83 E0 01                        	AND	EAX,1
   325 000002DA 0F 95 C0                        	SETNE	AL
   326 000002DD 0F B6 C0                        	MOVZX	EAX,AL
   327 000002E0 C9                              	LEAVE
   328 000002E1 C3                              	RET
   329 000002E2                                 	GLOBAL	_Identify
   330 000002E2                                 _Identify:
   331 000002E2 55                              	PUSH	EBP
   332 000002E3 31 C0                           	XOR	EAX,EAX
   333 000002E5 89 E5                           	MOV	EBP,ESP
   334 000002E7 53                              	PUSH	EBX
   335 000002E8 31 DB                           	XOR	EBX,EBX
   336 000002EA 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
   337 000002ED 83 FA 01                        	CMP	EDX,1
   338 000002F0 7F 6E                           	JG	L72
   339 000002F2 4A                              	DEC	EDX
   340 000002F3 74 70                           	JE	L76
   341 000002F5                                 L74:
   342 000002F5 6A 00                           	PUSH	0
   343 000002F7 68 000001F7                     	PUSH	503
   344 000002FC E8 FFFFFF5C                     	CALL	_WaitForBsy
   345 00000301 6A 00                           	PUSH	0
   346 00000303 68 000001F7                     	PUSH	503
   347 00000308 E8 FFFFFF23                     	CALL	_WaitForRdy
   348 0000030D 68 000001F6                     	PUSH	502
   349 00000312 0F BE C3                        	MOVSX	EAX,BL
   350 00000315 50                              	PUSH	EAX
   351 00000316 E8 [00000000]                   	CALL	_io_out8
   352 0000031B 68 000001F7                     	PUSH	503
   353 00000320 68 000000EC                     	PUSH	236
   354 00000325 E8 [00000000]                   	CALL	_io_out8
   355 0000032A 83 C4 20                        	ADD	ESP,32
   356 0000032D 6A 00                           	PUSH	0
   357 0000032F 68 000001F7                     	PUSH	503
   358 00000334 E8 FFFFFF56                     	CALL	_WaitForDrq
   359 00000339 68 000001F0                     	PUSH	496
   360 0000033E 68 00000200                     	PUSH	512
   361 00000343 FF 75 0C                        	PUSH	DWORD [12+EBP]
   362 00000346 E8 [00000000]                   	CALL	_inws
   363 0000034B 68 000001F7                     	PUSH	503
   364 00000350 E8 FFFFFF6F                     	CALL	_CmdSucc
   365 00000355 83 C4 18                        	ADD	ESP,24
   366 00000358 85 C0                           	TEST	EAX,EAX
   367 0000035A 0F 95 C0                        	SETNE	AL
   368 0000035D 0F B6 C0                        	MOVZX	EAX,AL
   369 00000360                                 L72:
   370 00000360 8B 5D FC                        	MOV	EBX,DWORD [-4+EBP]
   371 00000363 C9                              	LEAVE
   372 00000364 C3                              	RET
   373 00000365                                 L76:
   374 00000365 B3 10                           	MOV	BL,16
   375 00000367 EB 8C                           	JMP	L74
   376 00000369                                 	GLOBAL	_task_hd
   377 00000369                                 _task_hd:
   378 00000369 55                              	PUSH	EBP
   379 0000036A 89 E5                           	MOV	EBP,ESP
   380 0000036C 53                              	PUSH	EBX
   381 0000036D 83 EC 20                        	SUB	ESP,32
   382 00000370 E8 [00000000]                   	CALL	_io_cli
   383 00000375                                 L78:
   384 00000375 53                              	PUSH	EBX
   385 00000376 68 00002710                     	PUSH	10000
   386 0000037B E8 [00000000]                   	CALL	_message_receive
   387 00000380 83 3B 01                        	CMP	DWORD [EBX],1
   388 00000383 59                              	POP	ECX
   389 00000384 58                              	POP	EAX
   390 00000385 74 14                           	JE	L85
   391 00000387                                 L83:
   392 00000387 C7 43 08 00000000               	MOV	DWORD [8+EBX],0
   393 0000038E 53                              	PUSH	EBX
   394 0000038F FF 73 0C                        	PUSH	DWORD [12+EBX]
   395 00000392 E8 [00000000]                   	CALL	_message_send
   396 00000397 58                              	POP	EAX
   397 00000398 5A                              	POP	EDX
   398 00000399 EB DA                           	JMP	L78
   399 0000039B                                 L85:
   400 0000039B FF 73 08                        	PUSH	DWORD [8+EBX]
   401 0000039E 6A 00                           	PUSH	0
   402 000003A0 E8 FFFFFF3D                     	CALL	_Identify
   403 000003A5 53                              	PUSH	EBX
   404 000003A6 FF 73 0C                        	PUSH	DWORD [12+EBX]
   405 000003A9 E8 [00000000]                   	CALL	_message_send
   406 000003AE 83 C4 10                        	ADD	ESP,16
   407 000003B1 EB D4                           	JMP	L83
   408 000003B3                                 	GLOBAL	_IdeInitialize
   409 000003B3                                 _IdeInitialize:
   410 000003B3 55                              	PUSH	EBP
   411 000003B4 89 E5                           	MOV	EBP,ESP
   412 000003B6 6A 00                           	PUSH	0
   413 000003B8 68 000001F7                     	PUSH	503
   414 000003BD E8 FFFFFE9B                     	CALL	_WaitForBsy
   415 000003C2 6A 00                           	PUSH	0
   416 000003C4 68 000001F7                     	PUSH	503
   417 000003C9 E8 FFFFFE62                     	CALL	_WaitForRdy
   418 000003CE 68 000003F6                     	PUSH	1014
   419 000003D3 6A 0E                           	PUSH	14
   420 000003D5 E8 [00000000]                   	CALL	_io_out8
   421 000003DA 6A 00                           	PUSH	0
   422 000003DC 68 000001F7                     	PUSH	503
   423 000003E1 E8 FFFFFE77                     	CALL	_WaitForBsy
   424 000003E6 83 C4 20                        	ADD	ESP,32
   425 000003E9 6A 00                           	PUSH	0
   426 000003EB 68 000001F7                     	PUSH	503
   427 000003F0 E8 FFFFFE3B                     	CALL	_WaitForRdy
   428 000003F5 B8 00000001                     	MOV	EAX,1
   429 000003FA C9                              	LEAVE
   430 000003FB C3                              	RET
   431 000003FC                                 	GLOBAL	_inthandler2e
   432 000003FC                                 _inthandler2e:
   433 000003FC 55                              	PUSH	EBP
   434 000003FD 89 E5                           	MOV	EBP,ESP
   435 000003FF 6A 66                           	PUSH	102
   436 00000401 68 000000A0                     	PUSH	160
   437 00000406 E8 [00000000]                   	CALL	_io_out8
   438 0000040B 6A 62                           	PUSH	98
   439 0000040D 6A 20                           	PUSH	32
   440 0000040F E8 [00000000]                   	CALL	_io_out8
   441 00000414 C9                              	LEAVE
   442 00000415 C3                              	RET
   443 00000416                                 	GLOBAL	_HDEntry
   444 00000416                                 _HDEntry:
   445 00000416 55                              	PUSH	EBP
   446 00000417 89 E5                           	MOV	EBP,ESP
   447 00000419 56                              	PUSH	ESI
   448 0000041A 53                              	PUSH	EBX
   449 0000041B 81 EC 00000220                  	SUB	ESP,544
   450 00000421 8D 85 FFFFFDD8                  	LEA	EAX,DWORD [-552+EBP]
   451 00000427 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
   452 0000042A 50                              	PUSH	EAX
   453 0000042B 6A 00                           	PUSH	0
   454 0000042D E8 FFFFFEB0                     	CALL	_Identify
   455 00000432 E8 [00000000]                   	CALL	_task_alloc
   456 00000437 68 00010000                     	PUSH	65536
   457 0000043C FF 76 04                        	PUSH	DWORD [4+ESI]
   458 0000043F 89 C3                           	MOV	EBX,EAX
   459 00000441 E8 [00000000]                   	CALL	_memman_alloc_4k
   460 00000446 05 00010000                     	ADD	EAX,65536
   461 0000044B 89 43 64                        	MOV	DWORD [100+EBX],EAX
   462 0000044E C7 43 4C [00000369]             	MOV	DWORD [76+EBX],_task_hd
   463 00000455 C7 43 74 00000008               	MOV	DWORD [116+EBX],8
   464 0000045C C7 43 78 00000010               	MOV	DWORD [120+EBX],16
   465 00000463 C7 43 7C 00000008               	MOV	DWORD [124+EBX],8
   466 0000046A C7 83 00000080 00000008         	MOV	DWORD [128+EBX],8
   467 00000474 C7 83 00000084 00000008         	MOV	DWORD [132+EBX],8
   468 0000047E C7 83 00000088 00000008         	MOV	DWORD [136+EBX],8
   469 00000488 6A 01                           	PUSH	1
   470 0000048A 6A 04                           	PUSH	4
   471 0000048C 53                              	PUSH	EBX
   472 0000048D E8 [00000000]                   	CALL	_task_run
   473 00000492 B8 00000001                     	MOV	EAX,1
   474 00000497 89 1D 00000F01                  	MOV	DWORD [3841],EBX
   475 0000049D 89 5E 08                        	MOV	DWORD [8+ESI],EBX
   476 000004A0 8D 65 F8                        	LEA	ESP,DWORD [-8+EBP]
   477 000004A3 5B                              	POP	EBX
   478 000004A4 5E                              	POP	ESI
   479 000004A5 5D                              	POP	EBP
   480 000004A6 C3                              	RET
=======
     6 00000000                                 	EXTERN	_io_in8
     7 00000000                                 	EXTERN	_io_out8
     8 00000000                                 	EXTERN	_inws
     9 00000000                                 	EXTERN	_io_cli
    10 00000000                                 	EXTERN	_message_receive
    11 00000000                                 	EXTERN	_message_send
    12 00000000                                 	EXTERN	_task_alloc
    13 00000000                                 	EXTERN	_memman_alloc_4k
    14 00000000                                 	EXTERN	_task_run
    15 00000000                                 [FILE "hd.c"]
    16                                          [SECTION .text]
    17 00000000                                 _WaitForRdy:
    18 00000000 55                              	PUSH	EBP
    19 00000001 89 E5                           	MOV	EBP,ESP
    20 00000003 56                              	PUSH	ESI
    21 00000004 53                              	PUSH	EBX
    22 00000005 BB 00010000                     	MOV	EBX,65536
    23 0000000A 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
    24 0000000D                                 L7:
    25 0000000D 0F B7 C6                        	MOVZX	EAX,SI
    26 00000010 50                              	PUSH	EAX
    27 00000011 E8 [00000000]                   	CALL	_io_in8
    28 00000016 5A                              	POP	EDX
    29 00000017 83 E0 40                        	AND	EAX,64
    30 0000001A 84 C0                           	TEST	AL,AL
    31 0000001C 75 03                           	JNE	L3
    32 0000001E 4B                              	DEC	EBX
    33 0000001F 75 EC                           	JNE	L7
    34 00000021                                 L3:
    35 00000021 8D 65 F8                        	LEA	ESP,DWORD [-8+EBP]
    36 00000024 B8 00000001                     	MOV	EAX,1
    37 00000029 5B                              	POP	EBX
    38 0000002A 5E                              	POP	ESI
    39 0000002B 5D                              	POP	EBP
    40 0000002C C3                              	RET
    41 0000002D                                 _WaitForBsy:
    42 0000002D 55                              	PUSH	EBP
    43 0000002E 89 E5                           	MOV	EBP,ESP
    44 00000030 57                              	PUSH	EDI
    45 00000031 56                              	PUSH	ESI
    46 00000032 31 FF                           	XOR	EDI,EDI
    47 00000034 53                              	PUSH	EBX
    48 00000035 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
    49 00000038 BB 00010000                     	MOV	EBX,65536
    50 0000003D                                 L14:
    51 0000003D 0F B7 C6                        	MOVZX	EAX,SI
    52 00000040 50                              	PUSH	EAX
    53 00000041 E8 [00000000]                   	CALL	_io_in8
    54 00000046 59                              	POP	ECX
    55 00000047 84 C0                           	TEST	AL,AL
    56 00000049 79 0D                           	JNS	L15
    57 0000004B 4B                              	DEC	EBX
    58 0000004C 75 EF                           	JNE	L14
    59 0000004E                                 L10:
    60 0000004E 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
    61 00000051 89 F8                           	MOV	EAX,EDI
    62 00000053 5B                              	POP	EBX
    63 00000054 5E                              	POP	ESI
    64 00000055 5F                              	POP	EDI
    65 00000056 5D                              	POP	EBP
    66 00000057 C3                              	RET
    67 00000058                                 L15:
    68 00000058 BF 00000001                     	MOV	EDI,1
    69 0000005D EB EF                           	JMP	L10
    70 0000005F                                 _WaitForDrq:
    71 0000005F 55                              	PUSH	EBP
    72 00000060 89 E5                           	MOV	EBP,ESP
    73 00000062 57                              	PUSH	EDI
    74 00000063 56                              	PUSH	ESI
    75 00000064 31 FF                           	XOR	EDI,EDI
    76 00000066 53                              	PUSH	EBX
    77 00000067 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
    78 0000006A BB 00010000                     	MOV	EBX,65536
    79 0000006F                                 L22:
    80 0000006F 0F B7 C6                        	MOVZX	EAX,SI
    81 00000072 50                              	PUSH	EAX
    82 00000073 E8 [00000000]                   	CALL	_io_in8
    83 00000078 5A                              	POP	EDX
    84 00000079 83 E0 08                        	AND	EAX,8
    85 0000007C 84 C0                           	TEST	AL,AL
    86 0000007E 75 0D                           	JNE	L23
    87 00000080 4B                              	DEC	EBX
    88 00000081 75 EC                           	JNE	L22
    89 00000083                                 L18:
    90 00000083 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
    91 00000086 89 F8                           	MOV	EAX,EDI
    92 00000088 5B                              	POP	EBX
    93 00000089 5E                              	POP	ESI
    94 0000008A 5F                              	POP	EDI
    95 0000008B 5D                              	POP	EBP
    96 0000008C C3                              	RET
    97 0000008D                                 L23:
    98 0000008D BF 00000001                     	MOV	EDI,1
    99 00000092 EB EF                           	JMP	L18
   100 00000094                                 _CmdSucc:
   101 00000094 55                              	PUSH	EBP
   102 00000095 89 E5                           	MOV	EBP,ESP
   103 00000097 0F B7 45 08                     	MOVZX	EAX,WORD [8+EBP]
   104 0000009B 50                              	PUSH	EAX
   105 0000009C E8 [00000000]                   	CALL	_io_in8
   106 000000A1 59                              	POP	ECX
   107 000000A2 0F BE C0                        	MOVSX	EAX,AL
   108 000000A5 F7 D0                           	NOT	EAX
   109 000000A7 83 E0 01                        	AND	EAX,1
   110 000000AA 0F 95 C0                        	SETNE	AL
   111 000000AD 0F B6 C0                        	MOVZX	EAX,AL
   112 000000B0 C9                              	LEAVE
   113 000000B1 C3                              	RET
   114 000000B2                                 	GLOBAL	_Identify
   115 000000B2                                 _Identify:
   116 000000B2 55                              	PUSH	EBP
   117 000000B3 31 C0                           	XOR	EAX,EAX
   118 000000B5 89 E5                           	MOV	EBP,ESP
   119 000000B7 53                              	PUSH	EBX
   120 000000B8 31 DB                           	XOR	EBX,EBX
   121 000000BA 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
   122 000000BD 83 FA 01                        	CMP	EDX,1
   123 000000C0 7F 6E                           	JG	L26
   124 000000C2 4A                              	DEC	EDX
   125 000000C3 74 70                           	JE	L30
   126 000000C5                                 L28:
   127 000000C5 6A 00                           	PUSH	0
   128 000000C7 68 000001F7                     	PUSH	503
   129 000000CC E8 FFFFFF5C                     	CALL	_WaitForBsy
   130 000000D1 6A 00                           	PUSH	0
   131 000000D3 68 000001F7                     	PUSH	503
   132 000000D8 E8 FFFFFF23                     	CALL	_WaitForRdy
   133 000000DD 68 000001F6                     	PUSH	502
   134 000000E2 0F BE C3                        	MOVSX	EAX,BL
   135 000000E5 50                              	PUSH	EAX
   136 000000E6 E8 [00000000]                   	CALL	_io_out8
   137 000000EB 68 000001F7                     	PUSH	503
   138 000000F0 68 000000EC                     	PUSH	236
   139 000000F5 E8 [00000000]                   	CALL	_io_out8
   140 000000FA 83 C4 20                        	ADD	ESP,32
   141 000000FD 6A 00                           	PUSH	0
   142 000000FF 68 000001F7                     	PUSH	503
   143 00000104 E8 FFFFFF56                     	CALL	_WaitForDrq
   144 00000109 68 000001F0                     	PUSH	496
   145 0000010E 68 00000200                     	PUSH	512
   146 00000113 FF 75 0C                        	PUSH	DWORD [12+EBP]
   147 00000116 E8 [00000000]                   	CALL	_inws
   148 0000011B 68 000001F7                     	PUSH	503
   149 00000120 E8 FFFFFF6F                     	CALL	_CmdSucc
   150 00000125 83 C4 18                        	ADD	ESP,24
   151 00000128 85 C0                           	TEST	EAX,EAX
   152 0000012A 0F 95 C0                        	SETNE	AL
   153 0000012D 0F B6 C0                        	MOVZX	EAX,AL
   154 00000130                                 L26:
   155 00000130 8B 5D FC                        	MOV	EBX,DWORD [-4+EBP]
   156 00000133 C9                              	LEAVE
   157 00000134 C3                              	RET
   158 00000135                                 L30:
   159 00000135 B3 10                           	MOV	BL,16
   160 00000137 EB 8C                           	JMP	L28
   161 00000139                                 	GLOBAL	_task_hd
   162 00000139                                 _task_hd:
   163 00000139 55                              	PUSH	EBP
   164 0000013A 89 E5                           	MOV	EBP,ESP
   165 0000013C 53                              	PUSH	EBX
   166 0000013D 83 EC 20                        	SUB	ESP,32
   167 00000140 E8 [00000000]                   	CALL	_io_cli
   168 00000145                                 L32:
   169 00000145 53                              	PUSH	EBX
   170 00000146 68 00002710                     	PUSH	10000
   171 0000014B E8 [00000000]                   	CALL	_message_receive
   172 00000150 83 3B 01                        	CMP	DWORD [EBX],1
   173 00000153 59                              	POP	ECX
   174 00000154 58                              	POP	EAX
   175 00000155 74 14                           	JE	L39
   176 00000157                                 L37:
   177 00000157 C7 43 08 00000000               	MOV	DWORD [8+EBX],0
   178 0000015E 53                              	PUSH	EBX
   179 0000015F FF 73 0C                        	PUSH	DWORD [12+EBX]
   180 00000162 E8 [00000000]                   	CALL	_message_send
   181 00000167 58                              	POP	EAX
   182 00000168 5A                              	POP	EDX
   183 00000169 EB DA                           	JMP	L32
   184 0000016B                                 L39:
   185 0000016B FF 73 08                        	PUSH	DWORD [8+EBX]
   186 0000016E 6A 00                           	PUSH	0
   187 00000170 E8 FFFFFF3D                     	CALL	_Identify
   188 00000175 53                              	PUSH	EBX
   189 00000176 FF 73 0C                        	PUSH	DWORD [12+EBX]
   190 00000179 E8 [00000000]                   	CALL	_message_send
   191 0000017E 83 C4 10                        	ADD	ESP,16
   192 00000181 EB D4                           	JMP	L37
   193 00000183                                 	GLOBAL	_IdeInitialize
   194 00000183                                 _IdeInitialize:
   195 00000183 55                              	PUSH	EBP
   196 00000184 89 E5                           	MOV	EBP,ESP
   197 00000186 6A 00                           	PUSH	0
   198 00000188 68 000001F7                     	PUSH	503
   199 0000018D E8 FFFFFE9B                     	CALL	_WaitForBsy
   200 00000192 6A 00                           	PUSH	0
   201 00000194 68 000001F7                     	PUSH	503
   202 00000199 E8 FFFFFE62                     	CALL	_WaitForRdy
   203 0000019E 68 000003F6                     	PUSH	1014
   204 000001A3 6A 0E                           	PUSH	14
   205 000001A5 E8 [00000000]                   	CALL	_io_out8
   206 000001AA 6A 00                           	PUSH	0
   207 000001AC 68 000001F7                     	PUSH	503
   208 000001B1 E8 FFFFFE77                     	CALL	_WaitForBsy
   209 000001B6 83 C4 20                        	ADD	ESP,32
   210 000001B9 6A 00                           	PUSH	0
   211 000001BB 68 000001F7                     	PUSH	503
   212 000001C0 E8 FFFFFE3B                     	CALL	_WaitForRdy
   213 000001C5 B8 00000001                     	MOV	EAX,1
   214 000001CA C9                              	LEAVE
   215 000001CB C3                              	RET
   216 000001CC                                 	GLOBAL	_inthandler2e
   217 000001CC                                 _inthandler2e:
   218 000001CC 55                              	PUSH	EBP
   219 000001CD 89 E5                           	MOV	EBP,ESP
   220 000001CF 6A 66                           	PUSH	102
   221 000001D1 68 000000A0                     	PUSH	160
   222 000001D6 E8 [00000000]                   	CALL	_io_out8
   223 000001DB 6A 62                           	PUSH	98
   224 000001DD 6A 20                           	PUSH	32
   225 000001DF E8 [00000000]                   	CALL	_io_out8
   226 000001E4 C9                              	LEAVE
   227 000001E5 C3                              	RET
   228 000001E6                                 	GLOBAL	_HDEntry
   229 000001E6                                 _HDEntry:
   230 000001E6 55                              	PUSH	EBP
   231 000001E7 89 E5                           	MOV	EBP,ESP
   232 000001E9 56                              	PUSH	ESI
   233 000001EA 53                              	PUSH	EBX
   234 000001EB 81 EC 00000220                  	SUB	ESP,544
   235 000001F1 8D 85 FFFFFDD8                  	LEA	EAX,DWORD [-552+EBP]
   236 000001F7 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
   237 000001FA 50                              	PUSH	EAX
   238 000001FB 6A 00                           	PUSH	0
   239 000001FD E8 FFFFFEB0                     	CALL	_Identify
   240 00000202 E8 [00000000]                   	CALL	_task_alloc
   241 00000207 68 00010000                     	PUSH	65536
   242 0000020C FF 76 04                        	PUSH	DWORD [4+ESI]
   243 0000020F 89 C3                           	MOV	EBX,EAX
   244 00000211 E8 [00000000]                   	CALL	_memman_alloc_4k
   245 00000216 05 00010000                     	ADD	EAX,65536
   246 0000021B 89 43 64                        	MOV	DWORD [100+EBX],EAX
   247 0000021E C7 43 4C [00000139]             	MOV	DWORD [76+EBX],_task_hd
   248 00000225 C7 43 74 00000008               	MOV	DWORD [116+EBX],8
   249 0000022C C7 43 78 00000010               	MOV	DWORD [120+EBX],16
   250 00000233 C7 43 7C 00000008               	MOV	DWORD [124+EBX],8
   251 0000023A C7 83 00000080 00000008         	MOV	DWORD [128+EBX],8
   252 00000244 C7 83 00000084 00000008         	MOV	DWORD [132+EBX],8
   253 0000024E C7 83 00000088 00000008         	MOV	DWORD [136+EBX],8
   254 00000258 6A 01                           	PUSH	1
   255 0000025A 6A 04                           	PUSH	4
   256 0000025C 53                              	PUSH	EBX
   257 0000025D E8 [00000000]                   	CALL	_task_run
   258 00000262 B8 00000001                     	MOV	EAX,1
   259 00000267 89 1D 00000F01                  	MOV	DWORD [3841],EBX
   260 0000026D 89 5E 08                        	MOV	DWORD [8+ESI],EBX
   261 00000270 8D 65 F8                        	LEA	ESP,DWORD [-8+EBP]
   262 00000273 5B                              	POP	EBX
   263 00000274 5E                              	POP	ESI
   264 00000275 5D                              	POP	EBP
   265 00000276 C3                              	RET
>>>>>>> Stashed changes
